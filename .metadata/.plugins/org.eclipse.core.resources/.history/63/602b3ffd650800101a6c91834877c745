
try3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006428  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080065c8  080065c8  000075c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006690  08006690  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006690  08006690  00007690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006698  08006698  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006698  08006698  00007698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800669c  0800669c  0000769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080066a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047e4  20000060  08006700  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004844  08006700  00008844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001399b  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003496  00000000  00000000  0001ba2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0001eec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7e  00000000  00000000  0001fde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001995f  00000000  00000000  0002095e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013712  00000000  00000000  0003a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a964  00000000  00000000  0004d9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8333  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000413c  00000000  00000000  000e8378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ec4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065b0 	.word	0x080065b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080065b0 	.word	0x080065b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ce:	4b21      	ldr	r3, [pc, #132]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005d0:	4a21      	ldr	r2, [pc, #132]	@ (8000658 <MX_ADC1_Init+0x9c>)
 80005d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b19      	ldr	r3, [pc, #100]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fc:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005fe:	4a17      	ldr	r2, [pc, #92]	@ (800065c <MX_ADC1_Init+0xa0>)
 8000600:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <MX_ADC1_Init+0x98>)
 800060a:	2201      	movs	r2, #1
 800060c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <MX_ADC1_Init+0x98>)
 8000618:	2201      	movs	r2, #1
 800061a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <MX_ADC1_Init+0x98>)
 800061e:	f000 fc61 	bl	8000ee4 <HAL_ADC_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000628:	f000 faa2 	bl	8000b70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000634:	2307      	movs	r3, #7
 8000636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4619      	mov	r1, r3
 800063c:	4805      	ldr	r0, [pc, #20]	@ (8000654 <MX_ADC1_Init+0x98>)
 800063e:	f000 ff0f 	bl	8001460 <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000648:	f000 fa92 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000007c 	.word	0x2000007c
 8000658:	40012000 	.word	0x40012000
 800065c:	0f000001 	.word	0x0f000001

08000660 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	@ 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ec <HAL_ADC_MspInit+0x8c>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d12f      	bne.n	80006e2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <HAL_ADC_MspInit+0x90>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068a:	4a19      	ldr	r2, [pc, #100]	@ (80006f0 <HAL_ADC_MspInit+0x90>)
 800068c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000690:	6453      	str	r3, [r2, #68]	@ 0x44
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <HAL_ADC_MspInit+0x90>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <HAL_ADC_MspInit+0x90>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <HAL_ADC_MspInit+0x90>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <HAL_ADC_MspInit+0x90>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ba:	2301      	movs	r3, #1
 80006bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006be:	2303      	movs	r3, #3
 80006c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	4809      	ldr	r0, [pc, #36]	@ (80006f4 <HAL_ADC_MspInit+0x94>)
 80006ce:	f001 fa01 	bl	8001ad4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2105      	movs	r1, #5
 80006d6:	2012      	movs	r0, #18
 80006d8:	f001 f9c5 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006dc:	2012      	movs	r0, #18
 80006de:	f001 f9de 	bl	8001a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	@ 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40012000 	.word	0x40012000
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020000 	.word	0x40020000

080006f8 <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <vApplicationMallocFailedHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <vApplicationGetIdleTaskMemory+0x2c>)
 8000740:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <vApplicationGetIdleTaskMemory+0x30>)
 8000746:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	200000c8 	.word	0x200000c8
 8000760:	20000168 	.word	0x20000168

08000764 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4a07      	ldr	r2, [pc, #28]	@ (8000790 <vApplicationGetTimerTaskMemory+0x2c>)
 8000774:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	4a06      	ldr	r2, [pc, #24]	@ (8000794 <vApplicationGetTimerTaskMemory+0x30>)
 800077a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000782:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	20000368 	.word	0x20000368
 8000794:	20000408 	.word	0x20000408

08000798 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000798:	b5b0      	push	{r4, r5, r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
	  // Create a queue to hold flame status (1 element of size uint8_t)
	  xFlameQueue = xQueueCreate(1, sizeof(uint8_t));
 800079e:	2200      	movs	r2, #0
 80007a0:	2101      	movs	r1, #1
 80007a2:	2001      	movs	r0, #1
 80007a4:	f002 fdf3 	bl	800338e <xQueueGenericCreate>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000814 <MX_FREERTOS_Init+0x7c>)
 80007ac:	6013      	str	r3, [r2, #0]

	  // Create tasks
	  xTaskCreate(vFlameSensorTask, "Flame", 128, NULL, 3, &xFlameTaskHandle);
 80007ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_FREERTOS_Init+0x80>)
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	2303      	movs	r3, #3
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2300      	movs	r3, #0
 80007b8:	2280      	movs	r2, #128	@ 0x80
 80007ba:	4918      	ldr	r1, [pc, #96]	@ (800081c <MX_FREERTOS_Init+0x84>)
 80007bc:	4818      	ldr	r0, [pc, #96]	@ (8000820 <MX_FREERTOS_Init+0x88>)
 80007be:	f003 fb75 	bl	8003eac <xTaskCreate>
	  xTaskCreate(vAlertTask, "Alert", 128, NULL, 2, &xAlertTaskHandle);
 80007c2:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <MX_FREERTOS_Init+0x8c>)
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	2302      	movs	r3, #2
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2300      	movs	r3, #0
 80007cc:	2280      	movs	r2, #128	@ 0x80
 80007ce:	4916      	ldr	r1, [pc, #88]	@ (8000828 <MX_FREERTOS_Init+0x90>)
 80007d0:	4816      	ldr	r0, [pc, #88]	@ (800082c <MX_FREERTOS_Init+0x94>)
 80007d2:	f003 fb6b 	bl	8003eac <xTaskCreate>
	  xTaskCreate(vSerialTask, "Serial", 128, NULL, 1, &xSerialTaskHandle);
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_FREERTOS_Init+0x98>)
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	2301      	movs	r3, #1
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	4914      	ldr	r1, [pc, #80]	@ (8000834 <MX_FREERTOS_Init+0x9c>)
 80007e4:	4814      	ldr	r0, [pc, #80]	@ (8000838 <MX_FREERTOS_Init+0xa0>)
 80007e6:	f003 fb61 	bl	8003eac <xTaskCreate>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_FREERTOS_Init+0xa4>)
 80007ec:	1d3c      	adds	r4, r7, #4
 80007ee:	461d      	mov	r5, r3
 80007f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fbc8 	bl	8002f96 <osThreadCreate>
 8000806:	4603      	mov	r3, r0
 8000808:	4a0d      	ldr	r2, [pc, #52]	@ (8000840 <MX_FREERTOS_Init+0xa8>)
 800080a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bdb0      	pop	{r4, r5, r7, pc}
 8000814:	20000814 	.word	0x20000814
 8000818:	20000808 	.word	0x20000808
 800081c:	080065c8 	.word	0x080065c8
 8000820:	08000a3d 	.word	0x08000a3d
 8000824:	2000080c 	.word	0x2000080c
 8000828:	080065d0 	.word	0x080065d0
 800082c:	08000aa5 	.word	0x08000aa5
 8000830:	20000810 	.word	0x20000810
 8000834:	080065d8 	.word	0x080065d8
 8000838:	08000b01 	.word	0x08000b01
 800083c:	080065ec 	.word	0x080065ec
 8000840:	200000c4 	.word	0x200000c4

08000844 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f002 fbee 	bl	800302e <osDelay>
 8000852:	e7fb      	b.n	800084c <StartDefaultTask+0x8>

08000854 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <MX_GPIO_Init+0xcc>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a2b      	ldr	r2, [pc, #172]	@ (8000920 <MX_GPIO_Init+0xcc>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <MX_GPIO_Init+0xcc>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <MX_GPIO_Init+0xcc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a24      	ldr	r2, [pc, #144]	@ (8000920 <MX_GPIO_Init+0xcc>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_GPIO_Init+0xcc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_GPIO_Init+0xcc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a1d      	ldr	r2, [pc, #116]	@ (8000920 <MX_GPIO_Init+0xcc>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_GPIO_Init+0xcc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_GPIO_Init+0xcc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a16      	ldr	r2, [pc, #88]	@ (8000920 <MX_GPIO_Init+0xcc>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_GPIO_Init+0xcc>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2160      	movs	r1, #96	@ 0x60
 80008de:	4811      	ldr	r0, [pc, #68]	@ (8000924 <MX_GPIO_Init+0xd0>)
 80008e0:	f001 fa7c 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008e4:	2302      	movs	r3, #2
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	480b      	ldr	r0, [pc, #44]	@ (8000924 <MX_GPIO_Init+0xd0>)
 80008f8:	f001 f8ec 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80008fc:	2360      	movs	r3, #96	@ 0x60
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4804      	ldr	r0, [pc, #16]	@ (8000924 <MX_GPIO_Init+0xd0>)
 8000914:	f001 f8de 	bl	8001ad4 <HAL_GPIO_Init>

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092c:	f000 fa68 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f818 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000934:	f7ff ff8e 	bl	8000854 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000938:	f000 f9c6 	bl	8000cc8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800093c:	f7ff fe3e 	bl	80005bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // Ensure initial states
  HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2120      	movs	r1, #32
 8000944:	4806      	ldr	r0, [pc, #24]	@ (8000960 <main+0x38>)
 8000946:	f001 fa49 	bl	8001ddc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2140      	movs	r1, #64	@ 0x40
 800094e:	4804      	ldr	r0, [pc, #16]	@ (8000960 <main+0x38>)
 8000950:	f001 fa44 	bl	8001ddc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000954:	f7ff ff20 	bl	8000798 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000958:	f002 fb16 	bl	8002f88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <main+0x34>
 8000960:	40020000 	.word	0x40020000

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b094      	sub	sp, #80	@ 0x50
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0320 	add.w	r3, r7, #32
 800096e:	2230      	movs	r2, #48	@ 0x30
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f005 f940 	bl	8005bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	4b29      	ldr	r3, [pc, #164]	@ (8000a34 <SystemClock_Config+0xd0>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	4a28      	ldr	r2, [pc, #160]	@ (8000a34 <SystemClock_Config+0xd0>)
 8000992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000996:	6413      	str	r3, [r2, #64]	@ 0x40
 8000998:	4b26      	ldr	r3, [pc, #152]	@ (8000a34 <SystemClock_Config+0xd0>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009a4:	2300      	movs	r3, #0
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <SystemClock_Config+0xd4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009b0:	4a21      	ldr	r2, [pc, #132]	@ (8000a38 <SystemClock_Config+0xd4>)
 80009b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <SystemClock_Config+0xd4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009cc:	2310      	movs	r3, #16
 80009ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d0:	2302      	movs	r3, #2
 80009d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009d8:	2310      	movs	r3, #16
 80009da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009e2:	2304      	movs	r3, #4
 80009e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009e6:	2307      	movs	r3, #7
 80009e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fa0e 	bl	8001e10 <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009fa:	f000 f8b9 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a02:	2302      	movs	r3, #2
 8000a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 fc70 	bl	8002300 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a26:	f000 f8a3 	bl	8000b70 <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3750      	adds	r7, #80	@ 0x50
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <vFlameSensorTask>:

/* USER CODE BEGIN 4 */
// Flame Sensor Task
void vFlameSensorTask(void *pvParameters) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
    for (;;) {
        // Start ADC conversion
        HAL_ADC_Start(&hadc1);
 8000a44:	4813      	ldr	r0, [pc, #76]	@ (8000a94 <vFlameSensorTask+0x58>)
 8000a46:	f000 fa91 	bl	8000f6c <HAL_ADC_Start>
        // Wait for conversion to complete
        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000a4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4e:	4811      	ldr	r0, [pc, #68]	@ (8000a94 <vFlameSensorTask+0x58>)
 8000a50:	f000 fb40 	bl	80010d4 <HAL_ADC_PollForConversion>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d118      	bne.n	8000a8c <vFlameSensorTask+0x50>
            // Read ADC value
            adc_value = HAL_ADC_GetValue(&hadc1);
 8000a5a:	480e      	ldr	r0, [pc, #56]	@ (8000a94 <vFlameSensorTask+0x58>)
 8000a5c:	f000 fcd5 	bl	800140a <HAL_ADC_GetValue>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <vFlameSensorTask+0x5c>)
 8000a66:	801a      	strh	r2, [r3, #0]
            // Check if flame is detected
            flame_status = (adc_value > FLAME_THRESHOLD) ? 1 : 0;
 8000a68:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <vFlameSensorTask+0x5c>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a70:	bf8c      	ite	hi
 8000a72:	2301      	movhi	r3, #1
 8000a74:	2300      	movls	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <vFlameSensorTask+0x60>)
 8000a7c:	701a      	strb	r2, [r3, #0]
            // Send status to queue
            xQueueOverwrite(xFlameQueue, &flame_status);
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <vFlameSensorTask+0x64>)
 8000a80:	6818      	ldr	r0, [r3, #0]
 8000a82:	2302      	movs	r3, #2
 8000a84:	2200      	movs	r2, #0
 8000a86:	4905      	ldr	r1, [pc, #20]	@ (8000a9c <vFlameSensorTask+0x60>)
 8000a88:	f002 fcdc 	bl	8003444 <xQueueGenericSend>
        }
        // Delay for 100ms
        vTaskDelay(pdMS_TO_TICKS(100));
 8000a8c:	2064      	movs	r0, #100	@ 0x64
 8000a8e:	f003 fb5d 	bl	800414c <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 8000a92:	e7d7      	b.n	8000a44 <vFlameSensorTask+0x8>
 8000a94:	2000007c 	.word	0x2000007c
 8000a98:	20000818 	.word	0x20000818
 8000a9c:	2000081a 	.word	0x2000081a
 8000aa0:	20000814 	.word	0x20000814

08000aa4 <vAlertTask>:
  }
}

// Alert Task
void vAlertTask(void *pvParameters) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint8_t flame_status;

  for(;;) {
    xQueuePeek(xFlameQueue, &flame_status, portMAX_DELAY);
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <vAlertTask+0x54>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f107 010f 	add.w	r1, r7, #15
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 ff45 	bl	8003948 <xQueuePeek>

    if(flame_status) {
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00a      	beq.n	8000ada <vAlertTask+0x36>
      HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2120      	movs	r1, #32
 8000ac8:	480c      	ldr	r0, [pc, #48]	@ (8000afc <vAlertTask+0x58>)
 8000aca:	f001 f987 	bl	8001ddc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2140      	movs	r1, #64	@ 0x40
 8000ad2:	480a      	ldr	r0, [pc, #40]	@ (8000afc <vAlertTask+0x58>)
 8000ad4:	f001 f982 	bl	8001ddc <HAL_GPIO_WritePin>
 8000ad8:	e009      	b.n	8000aee <vAlertTask+0x4a>
    } else {
      HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2120      	movs	r1, #32
 8000ade:	4807      	ldr	r0, [pc, #28]	@ (8000afc <vAlertTask+0x58>)
 8000ae0:	f001 f97c 	bl	8001ddc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2140      	movs	r1, #64	@ 0x40
 8000ae8:	4804      	ldr	r0, [pc, #16]	@ (8000afc <vAlertTask+0x58>)
 8000aea:	f001 f977 	bl	8001ddc <HAL_GPIO_WritePin>
    }
    vTaskDelay(pdMS_TO_TICKS(10));
 8000aee:	200a      	movs	r0, #10
 8000af0:	f003 fb2c 	bl	800414c <vTaskDelay>
    xQueuePeek(xFlameQueue, &flame_status, portMAX_DELAY);
 8000af4:	e7da      	b.n	8000aac <vAlertTask+0x8>
 8000af6:	bf00      	nop
 8000af8:	20000814 	.word	0x20000814
 8000afc:	40020000 	.word	0x40020000

08000b00 <vSerialTask>:
  }
}

// Serial Task
void vSerialTask(void *pvParameters) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint8_t flame_status;
  char msg[20];

  for(;;) {
    xQueuePeek(xFlameQueue, &flame_status, portMAX_DELAY);
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <vSerialTask+0x60>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f107 011f 	add.w	r1, r7, #31
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 ff17 	bl	8003948 <xQueuePeek>

    if(flame_status) {
 8000b1a:	7ffb      	ldrb	r3, [r7, #31]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <vSerialTask+0x2e>
      sprintf(msg, "FLAME DETECTED!\r\n");
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	490f      	ldr	r1, [pc, #60]	@ (8000b64 <vSerialTask+0x64>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f005 f844 	bl	8005bb4 <siprintf>
 8000b2c:	e005      	b.n	8000b3a <vSerialTask+0x3a>
    } else {
      sprintf(msg, "System Normal\r\n");
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	490d      	ldr	r1, [pc, #52]	@ (8000b68 <vSerialTask+0x68>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f005 f83d 	bl	8005bb4 <siprintf>
    }

    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fb4e 	bl	80001e0 <strlen>
 8000b44:	4603      	mov	r3, r0
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	f107 0108 	add.w	r1, r7, #8
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b50:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <vSerialTask+0x6c>)
 8000b52:	f001 fe45 	bl	80027e0 <HAL_UART_Transmit>
    vTaskDelay(pdMS_TO_TICKS(500));
 8000b56:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b5a:	f003 faf7 	bl	800414c <vTaskDelay>
    xQueuePeek(xFlameQueue, &flame_status, portMAX_DELAY);
 8000b5e:	e7d3      	b.n	8000b08 <vSerialTask+0x8>
 8000b60:	20000814 	.word	0x20000814
 8000b64:	08006608 	.word	0x08006608
 8000b68:	0800661c 	.word	0x0800661c
 8000b6c:	20000820 	.word	0x20000820

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <Error_Handler+0x8>

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <HAL_MspInit+0x54>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	4a11      	ldr	r2, [pc, #68]	@ (8000bd0 <HAL_MspInit+0x54>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <HAL_MspInit+0x54>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <HAL_MspInit+0x54>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_MspInit+0x54>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_MspInit+0x54>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	f06f 0001 	mvn.w	r0, #1
 8000bc2:	f000 ff50 	bl	8001a66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0e:	f000 f949 	bl	8000ea4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c12:	f003 ff3d 	bl	8004a90 <xTaskGetSchedulerState>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d001      	beq.n	8000c20 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c1c:	f004 fd44 	bl	80056a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <ADC_IRQHandler+0x10>)
 8000c2a:	f000 fade 	bl	80011ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000007c 	.word	0x2000007c

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f005 f82c 	bl	8005cc4 <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20018000 	.word	0x20018000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	2000081c 	.word	0x2000081c
 8000ca0:	20004848 	.word	0x20004848

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	@ (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	@ (8000d18 <MX_USART2_UART_Init+0x50>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f001 fd1e 	bl	8002740 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d0a:	f7ff ff31 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000820 	.word	0x20000820
 8000d18:	40004400 	.word	0x40004400

08000d1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a19      	ldr	r2, [pc, #100]	@ (8000da0 <HAL_UART_MspInit+0x84>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d12b      	bne.n	8000d96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <HAL_UART_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	4a17      	ldr	r2, [pc, #92]	@ (8000da4 <HAL_UART_MspInit+0x88>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_UART_MspInit+0x88>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <HAL_UART_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a10      	ldr	r2, [pc, #64]	@ (8000da4 <HAL_UART_MspInit+0x88>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <HAL_UART_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d76:	230c      	movs	r3, #12
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d86:	2307      	movs	r3, #7
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <HAL_UART_MspInit+0x8c>)
 8000d92:	f000 fe9f 	bl	8001ad4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	@ 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020000 	.word	0x40020000

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000db0:	f7ff ff78 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	@ (8000dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f004 ff79 	bl	8005cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fda3 	bl	8000928 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000df0:	080066a0 	.word	0x080066a0
  ldr r2, =_sbss
 8000df4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000df8:	20004844 	.word	0x20004844

08000dfc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <DMA1_Stream0_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	@ (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fe11 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	200f      	movs	r0, #15
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fea2 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fe29 	bl	8001aba <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 fdf1 	bl	8001a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000868 	.word	0x20000868

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000868 	.word	0x20000868

08000ee4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e033      	b.n	8000f62 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fbac 	bl	8000660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d118      	bne.n	8000f54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f2a:	f023 0302 	bic.w	r3, r3, #2
 8000f2e:	f043 0202 	orr.w	r2, r3, #2
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 fbb4 	bl	80016a4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	f023 0303 	bic.w	r3, r3, #3
 8000f4a:	f043 0201 	orr.w	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f52:	e001      	b.n	8000f58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d101      	bne.n	8000f86 <HAL_ADC_Start+0x1a>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e097      	b.n	80010b6 <HAL_ADC_Start+0x14a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d018      	beq.n	8000fce <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0201 	orr.w	r2, r2, #1
 8000faa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fac:	4b45      	ldr	r3, [pc, #276]	@ (80010c4 <HAL_ADC_Start+0x158>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a45      	ldr	r2, [pc, #276]	@ (80010c8 <HAL_ADC_Start+0x15c>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	0c9a      	lsrs	r2, r3, #18
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000fc0:	e002      	b.n	8000fc8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f9      	bne.n	8000fc2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d15f      	bne.n	800109c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000fe4:	f023 0301 	bic.w	r3, r3, #1
 8000fe8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d007      	beq.n	800100e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001006:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800101a:	d106      	bne.n	800102a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001020:	f023 0206 	bic.w	r2, r3, #6
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	645a      	str	r2, [r3, #68]	@ 0x44
 8001028:	e002      	b.n	8001030 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001038:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <HAL_ADC_Start+0x160>)
 800103a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001044:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10f      	bne.n	8001072 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d129      	bne.n	80010b4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	e020      	b.n	80010b4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a16      	ldr	r2, [pc, #88]	@ (80010d0 <HAL_ADC_Start+0x164>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d11b      	bne.n	80010b4 <HAL_ADC_Start+0x148>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d114      	bne.n	80010b4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	e00b      	b.n	80010b4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	f043 0210 	orr.w	r2, r3, #16
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ac:	f043 0201 	orr.w	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000000 	.word	0x20000000
 80010c8:	431bde83 	.word	0x431bde83
 80010cc:	40012300 	.word	0x40012300
 80010d0:	40012000 	.word	0x40012000

080010d4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010f0:	d113      	bne.n	800111a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001100:	d10b      	bne.n	800111a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	f043 0220 	orr.w	r2, r3, #32
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e063      	b.n	80011e2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800111a:	f7ff fed7 	bl	8000ecc <HAL_GetTick>
 800111e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001120:	e021      	b.n	8001166 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d01d      	beq.n	8001166 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d007      	beq.n	8001140 <HAL_ADC_PollForConversion+0x6c>
 8001130:	f7ff fecc 	bl	8000ecc <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	d212      	bcs.n	8001166 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b02      	cmp	r3, #2
 800114c:	d00b      	beq.n	8001166 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f043 0204 	orr.w	r2, r3, #4
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e03d      	b.n	80011e2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b02      	cmp	r3, #2
 8001172:	d1d6      	bne.n	8001122 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f06f 0212 	mvn.w	r2, #18
 800117c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d123      	bne.n	80011e0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800119c:	2b00      	cmp	r3, #0
 800119e:	d11f      	bne.n	80011e0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d111      	bne.n	80011e0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f003 0320 	and.w	r3, r3, #32
 8001218:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d049      	beq.n	80012b4 <HAL_ADC_IRQHandler+0xca>
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d046      	beq.n	80012b4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	2b00      	cmp	r3, #0
 8001230:	d105      	bne.n	800123e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d12b      	bne.n	80012a4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001250:	2b00      	cmp	r3, #0
 8001252:	d127      	bne.n	80012a4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800126c:	2b00      	cmp	r3, #0
 800126e:	d119      	bne.n	80012a4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0220 	bic.w	r2, r2, #32
 800127e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d105      	bne.n	80012a4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f043 0201 	orr.w	r2, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f8bd 	bl	8001424 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f06f 0212 	mvn.w	r2, #18
 80012b2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d057      	beq.n	800137a <HAL_ADC_IRQHandler+0x190>
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d054      	beq.n	800137a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d105      	bne.n	80012e8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d139      	bne.n	800136a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012fc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800130e:	2b00      	cmp	r3, #0
 8001310:	d12b      	bne.n	800136a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800131c:	2b00      	cmp	r3, #0
 800131e:	d124      	bne.n	800136a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800132a:	2b00      	cmp	r3, #0
 800132c:	d11d      	bne.n	800136a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001332:	2b00      	cmp	r3, #0
 8001334:	d119      	bne.n	800136a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001344:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135a:	2b00      	cmp	r3, #0
 800135c:	d105      	bne.n	800136a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fa96 	bl	800189c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f06f 020c 	mvn.w	r2, #12
 8001378:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001388:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d017      	beq.n	80013c0 <HAL_ADC_IRQHandler+0x1d6>
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d014      	beq.n	80013c0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d10d      	bne.n	80013c0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f841 	bl	8001438 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f06f 0201 	mvn.w	r2, #1
 80013be:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0320 	and.w	r3, r3, #32
 80013c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013ce:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d015      	beq.n	8001402 <HAL_ADC_IRQHandler+0x218>
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d012      	beq.n	8001402 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e0:	f043 0202 	orr.w	r2, r3, #2
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f06f 0220 	mvn.w	r2, #32
 80013f0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f82a 	bl	800144c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f06f 0220 	mvn.w	r2, #32
 8001400:	601a      	str	r2, [r3, #0]
  }
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1c>
 8001478:	2302      	movs	r3, #2
 800147a:	e105      	b.n	8001688 <HAL_ADC_ConfigChannel+0x228>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b09      	cmp	r3, #9
 800148a:	d925      	bls.n	80014d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68d9      	ldr	r1, [r3, #12]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	3b1e      	subs	r3, #30
 80014a2:	2207      	movs	r2, #7
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43da      	mvns	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	400a      	ands	r2, r1
 80014b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68d9      	ldr	r1, [r3, #12]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	4603      	mov	r3, r0
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4403      	add	r3, r0
 80014ca:	3b1e      	subs	r3, #30
 80014cc:	409a      	lsls	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	e022      	b.n	800151e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6919      	ldr	r1, [r3, #16]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	2207      	movs	r2, #7
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	400a      	ands	r2, r1
 80014fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6919      	ldr	r1, [r3, #16]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	4603      	mov	r3, r0
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4403      	add	r3, r0
 8001514:	409a      	lsls	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b06      	cmp	r3, #6
 8001524:	d824      	bhi.n	8001570 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3b05      	subs	r3, #5
 8001538:	221f      	movs	r2, #31
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	400a      	ands	r2, r1
 8001546:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	3b05      	subs	r3, #5
 8001562:	fa00 f203 	lsl.w	r2, r0, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	635a      	str	r2, [r3, #52]	@ 0x34
 800156e:	e04c      	b.n	800160a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	d824      	bhi.n	80015c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3b23      	subs	r3, #35	@ 0x23
 800158a:	221f      	movs	r2, #31
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43da      	mvns	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	400a      	ands	r2, r1
 8001598:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	3b23      	subs	r3, #35	@ 0x23
 80015b4:	fa00 f203 	lsl.w	r2, r0, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	631a      	str	r2, [r3, #48]	@ 0x30
 80015c0:	e023      	b.n	800160a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	3b41      	subs	r3, #65	@ 0x41
 80015d4:	221f      	movs	r2, #31
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	400a      	ands	r2, r1
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	3b41      	subs	r3, #65	@ 0x41
 80015fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800160a:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <HAL_ADC_ConfigChannel+0x234>)
 800160c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a21      	ldr	r2, [pc, #132]	@ (8001698 <HAL_ADC_ConfigChannel+0x238>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d109      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1cc>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b12      	cmp	r3, #18
 800161e:	d105      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	@ (8001698 <HAL_ADC_ConfigChannel+0x238>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d123      	bne.n	800167e <HAL_ADC_ConfigChannel+0x21e>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d003      	beq.n	8001646 <HAL_ADC_ConfigChannel+0x1e6>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b11      	cmp	r3, #17
 8001644:	d11b      	bne.n	800167e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b10      	cmp	r3, #16
 8001658:	d111      	bne.n	800167e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_ADC_ConfigChannel+0x23c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a10      	ldr	r2, [pc, #64]	@ (80016a0 <HAL_ADC_ConfigChannel+0x240>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	0c9a      	lsrs	r2, r3, #18
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001670:	e002      	b.n	8001678 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3b01      	subs	r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40012300 	.word	0x40012300
 8001698:	40012000 	.word	0x40012000
 800169c:	20000000 	.word	0x20000000
 80016a0:	431bde83 	.word	0x431bde83

080016a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ac:	4b79      	ldr	r3, [pc, #484]	@ (8001894 <ADC_Init+0x1f0>)
 80016ae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	021a      	lsls	r2, r3, #8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800171e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6899      	ldr	r1, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001736:	4a58      	ldr	r2, [pc, #352]	@ (8001898 <ADC_Init+0x1f4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d022      	beq.n	8001782 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800174a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800176c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6899      	ldr	r1, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	e00f      	b.n	80017a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0202 	bic.w	r2, r2, #2
 80017b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6899      	ldr	r1, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7e1b      	ldrb	r3, [r3, #24]
 80017bc:	005a      	lsls	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01b      	beq.n	8001808 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017de:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	3b01      	subs	r3, #1
 80017fc:	035a      	lsls	r2, r3, #13
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	e007      	b.n	8001818 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001816:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	3b01      	subs	r3, #1
 8001834:	051a      	lsls	r2, r3, #20
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800184c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6899      	ldr	r1, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800185a:	025a      	lsls	r2, r3, #9
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6899      	ldr	r1, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	029a      	lsls	r2, r3, #10
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	609a      	str	r2, [r3, #8]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40012300 	.word	0x40012300
 8001898:	0f000001 	.word	0x0f000001

0800189c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4907      	ldr	r1, [pc, #28]	@ (800194c <__NVIC_EnableIRQ+0x38>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db0a      	blt.n	800197a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	490c      	ldr	r1, [pc, #48]	@ (800199c <__NVIC_SetPriority+0x4c>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	0112      	lsls	r2, r2, #4
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	440b      	add	r3, r1
 8001974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001978:	e00a      	b.n	8001990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4908      	ldr	r1, [pc, #32]	@ (80019a0 <__NVIC_SetPriority+0x50>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	3b04      	subs	r3, #4
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	440b      	add	r3, r1
 800198e:	761a      	strb	r2, [r3, #24]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	@ 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f1c3 0307 	rsb	r3, r3, #7
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf28      	it	cs
 80019c2:	2304      	movcs	r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3304      	adds	r3, #4
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d902      	bls.n	80019d4 <NVIC_EncodePriority+0x30>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3b03      	subs	r3, #3
 80019d2:	e000      	b.n	80019d6 <NVIC_EncodePriority+0x32>
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	401a      	ands	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	4313      	orrs	r3, r2
         );
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3724      	adds	r7, #36	@ 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a1c:	d301      	bcc.n	8001a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00f      	b.n	8001a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a22:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <SysTick_Config+0x40>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f7ff ff8e 	bl	8001950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <SysTick_Config+0x40>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <SysTick_Config+0x40>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff29 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a78:	f7ff ff3e 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	6978      	ldr	r0, [r7, #20]
 8001a84:	f7ff ff8e 	bl	80019a4 <NVIC_EncodePriority>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff5d 	bl	8001950 <__NVIC_SetPriority>
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff31 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffa2 	bl	8001a0c <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e159      	b.n	8001da4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8148 	bne.w	8001d9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d005      	beq.n	8001b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d130      	bne.n	8001b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d017      	beq.n	8001bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80a2 	beq.w	8001d9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b57      	ldr	r3, [pc, #348]	@ (8001dbc <HAL_GPIO_Init+0x2e8>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	4a56      	ldr	r2, [pc, #344]	@ (8001dbc <HAL_GPIO_Init+0x2e8>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6a:	4b54      	ldr	r3, [pc, #336]	@ (8001dbc <HAL_GPIO_Init+0x2e8>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a52      	ldr	r2, [pc, #328]	@ (8001dc0 <HAL_GPIO_Init+0x2ec>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a49      	ldr	r2, [pc, #292]	@ (8001dc4 <HAL_GPIO_Init+0x2f0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d019      	beq.n	8001cd6 <HAL_GPIO_Init+0x202>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a48      	ldr	r2, [pc, #288]	@ (8001dc8 <HAL_GPIO_Init+0x2f4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x1fe>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a47      	ldr	r2, [pc, #284]	@ (8001dcc <HAL_GPIO_Init+0x2f8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00d      	beq.n	8001cce <HAL_GPIO_Init+0x1fa>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a46      	ldr	r2, [pc, #280]	@ (8001dd0 <HAL_GPIO_Init+0x2fc>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x1f6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a45      	ldr	r2, [pc, #276]	@ (8001dd4 <HAL_GPIO_Init+0x300>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_GPIO_Init+0x1f2>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce8:	4935      	ldr	r1, [pc, #212]	@ (8001dc0 <HAL_GPIO_Init+0x2ec>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf6:	4b38      	ldr	r3, [pc, #224]	@ (8001dd8 <HAL_GPIO_Init+0x304>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d20:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d44:	4a24      	ldr	r2, [pc, #144]	@ (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d74:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d98:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	f67f aea2 	bls.w	8001af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3724      	adds	r7, #36	@ 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40013800 	.word	0x40013800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40013c00 	.word	0x40013c00

08001ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dec:	787b      	ldrb	r3, [r7, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e267      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d075      	beq.n	8001f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e2e:	4b88      	ldr	r3, [pc, #544]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d00c      	beq.n	8001e54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3a:	4b85      	ldr	r3, [pc, #532]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d112      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e46:	4b82      	ldr	r3, [pc, #520]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	4b7e      	ldr	r3, [pc, #504]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d05b      	beq.n	8001f18 <HAL_RCC_OscConfig+0x108>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d157      	bne.n	8001f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e242      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0x74>
 8001e76:	4b76      	ldr	r3, [pc, #472]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a75      	ldr	r2, [pc, #468]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x98>
 8001e8e:	4b70      	ldr	r3, [pc, #448]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6f      	ldr	r2, [pc, #444]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6c      	ldr	r2, [pc, #432]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001ea8:	4b69      	ldr	r3, [pc, #420]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a68      	ldr	r2, [pc, #416]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b66      	ldr	r3, [pc, #408]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a65      	ldr	r2, [pc, #404]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f800 	bl	8000ecc <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7fe fffc 	bl	8000ecc <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	@ 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e207      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xc0>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7fe ffec 	bl	8000ecc <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7fe ffe8 	bl	8000ecc <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	@ 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1f3      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	4b51      	ldr	r3, [pc, #324]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xe8>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f26:	4b4a      	ldr	r3, [pc, #296]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f32:	4b47      	ldr	r3, [pc, #284]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d11c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b44      	ldr	r3, [pc, #272]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d116      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	4b41      	ldr	r3, [pc, #260]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e1c7      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f62:	4b3b      	ldr	r3, [pc, #236]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4937      	ldr	r1, [pc, #220]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	e03a      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f80:	4b34      	ldr	r3, [pc, #208]	@ (8002054 <HAL_RCC_OscConfig+0x244>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe ffa1 	bl	8000ecc <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7fe ff9d 	bl	8000ecc <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1a8      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b28      	ldr	r3, [pc, #160]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4925      	ldr	r1, [pc, #148]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <HAL_RCC_OscConfig+0x244>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7fe ff80 	bl	8000ecc <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd0:	f7fe ff7c 	bl	8000ecc <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e187      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d036      	beq.n	8002068 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_RCC_OscConfig+0x248>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7fe ff60 	bl	8000ecc <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002010:	f7fe ff5c 	bl	8000ecc <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e167      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8002024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x200>
 800202e:	e01b      	b.n	8002068 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002030:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <HAL_RCC_OscConfig+0x248>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7fe ff49 	bl	8000ecc <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	e00e      	b.n	800205c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203e:	f7fe ff45 	bl	8000ecc <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d907      	bls.n	800205c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e150      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
 8002050:	40023800 	.word	0x40023800
 8002054:	42470000 	.word	0x42470000
 8002058:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	4b88      	ldr	r3, [pc, #544]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800205e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ea      	bne.n	800203e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8097 	beq.w	80021a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207a:	4b81      	ldr	r3, [pc, #516]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	4b7d      	ldr	r3, [pc, #500]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	4a7c      	ldr	r2, [pc, #496]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002094:	6413      	str	r3, [r2, #64]	@ 0x40
 8002096:	4b7a      	ldr	r3, [pc, #488]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a2:	2301      	movs	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a6:	4b77      	ldr	r3, [pc, #476]	@ (8002284 <HAL_RCC_OscConfig+0x474>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d118      	bne.n	80020e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b2:	4b74      	ldr	r3, [pc, #464]	@ (8002284 <HAL_RCC_OscConfig+0x474>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a73      	ldr	r2, [pc, #460]	@ (8002284 <HAL_RCC_OscConfig+0x474>)
 80020b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020be:	f7fe ff05 	bl	8000ecc <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c6:	f7fe ff01 	bl	8000ecc <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e10c      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002284 <HAL_RCC_OscConfig+0x474>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x2ea>
 80020ec:	4b64      	ldr	r3, [pc, #400]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f0:	4a63      	ldr	r2, [pc, #396]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f8:	e01c      	b.n	8002134 <HAL_RCC_OscConfig+0x324>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x30c>
 8002102:	4b5f      	ldr	r3, [pc, #380]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002106:	4a5e      	ldr	r2, [pc, #376]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6713      	str	r3, [r2, #112]	@ 0x70
 800210e:	4b5c      	ldr	r3, [pc, #368]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002112:	4a5b      	ldr	r2, [pc, #364]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	@ 0x70
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0x324>
 800211c:	4b58      	ldr	r3, [pc, #352]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002120:	4a57      	ldr	r2, [pc, #348]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	6713      	str	r3, [r2, #112]	@ 0x70
 8002128:	4b55      	ldr	r3, [pc, #340]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212c:	4a54      	ldr	r2, [pc, #336]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800212e:	f023 0304 	bic.w	r3, r3, #4
 8002132:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7fe fec6 	bl	8000ecc <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7fe fec2 	bl	8000ecc <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0cb      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	4b49      	ldr	r3, [pc, #292]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0ee      	beq.n	8002144 <HAL_RCC_OscConfig+0x334>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7fe feb0 	bl	8000ecc <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7fe feac 	bl	8000ecc <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0b5      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002186:	4b3e      	ldr	r3, [pc, #248]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ee      	bne.n	8002170 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002198:	4b39      	ldr	r3, [pc, #228]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	4a38      	ldr	r2, [pc, #224]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800219e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a1 	beq.w	80022f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ae:	4b34      	ldr	r3, [pc, #208]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d05c      	beq.n	8002274 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d141      	bne.n	8002246 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b31      	ldr	r3, [pc, #196]	@ (8002288 <HAL_RCC_OscConfig+0x478>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe fe80 	bl	8000ecc <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7fe fe7c 	bl	8000ecc <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e087      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	019b      	lsls	r3, r3, #6
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002204:	085b      	lsrs	r3, r3, #1
 8002206:	3b01      	subs	r3, #1
 8002208:	041b      	lsls	r3, r3, #16
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	061b      	lsls	r3, r3, #24
 8002212:	491b      	ldr	r1, [pc, #108]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_RCC_OscConfig+0x478>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7fe fe55 	bl	8000ecc <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7fe fe51 	bl	8000ecc <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e05c      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002238:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x416>
 8002244:	e054      	b.n	80022f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002246:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <HAL_RCC_OscConfig+0x478>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe fe3e 	bl	8000ecc <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fe3a 	bl	8000ecc <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e045      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x444>
 8002272:	e03d      	b.n	80022f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e038      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000
 8002288:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800228c:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <HAL_RCC_OscConfig+0x4ec>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d028      	beq.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d121      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d11a      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d111      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d2:	085b      	lsrs	r3, r3, #1
 80022d4:	3b01      	subs	r3, #1
 80022d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d107      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0cc      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b68      	ldr	r3, [pc, #416]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d90c      	bls.n	800233c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b65      	ldr	r3, [pc, #404]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0b8      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4b59      	ldr	r3, [pc, #356]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a58      	ldr	r2, [pc, #352]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800235e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800236c:	4b53      	ldr	r3, [pc, #332]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a52      	ldr	r2, [pc, #328]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b50      	ldr	r3, [pc, #320]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	494d      	ldr	r1, [pc, #308]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d044      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d119      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d003      	beq.n	80023be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b3f      	ldr	r3, [pc, #252]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3b      	ldr	r3, [pc, #236]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e067      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b37      	ldr	r3, [pc, #220]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4934      	ldr	r1, [pc, #208]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fd6c 	bl	8000ecc <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7fe fd68 	bl	8000ecc <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b25      	ldr	r3, [pc, #148]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d20c      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4916      	ldr	r1, [pc, #88]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002472:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490e      	ldr	r1, [pc, #56]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f821 	bl	80024cc <HAL_RCC_GetSysClockFreq>
 800248a:	4602      	mov	r2, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490a      	ldr	r1, [pc, #40]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a09      	ldr	r2, [pc, #36]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024a2:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fccc 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00
 80024bc:	40023800 	.word	0x40023800
 80024c0:	08006644 	.word	0x08006644
 80024c4:	20000000 	.word	0x20000000
 80024c8:	20000004 	.word	0x20000004

080024cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d0:	b094      	sub	sp, #80	@ 0x50
 80024d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e4:	4b79      	ldr	r3, [pc, #484]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d00d      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x40>
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	f200 80e1 	bhi.w	80026b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x34>
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x3a>
 80024fe:	e0db      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4b73      	ldr	r3, [pc, #460]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002502:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002504:	e0db      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002506:	4b73      	ldr	r3, [pc, #460]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002508:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800250a:	e0d8      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800250c:	4b6f      	ldr	r3, [pc, #444]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002514:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002516:	4b6d      	ldr	r3, [pc, #436]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d063      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002522:	4b6a      	ldr	r3, [pc, #424]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	099b      	lsrs	r3, r3, #6
 8002528:	2200      	movs	r2, #0
 800252a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800252c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800252e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002534:	633b      	str	r3, [r7, #48]	@ 0x30
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	@ 0x34
 800253a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800253e:	4622      	mov	r2, r4
 8002540:	462b      	mov	r3, r5
 8002542:	f04f 0000 	mov.w	r0, #0
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	0159      	lsls	r1, r3, #5
 800254c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002550:	0150      	lsls	r0, r2, #5
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4621      	mov	r1, r4
 8002558:	1a51      	subs	r1, r2, r1
 800255a:	6139      	str	r1, [r7, #16]
 800255c:	4629      	mov	r1, r5
 800255e:	eb63 0301 	sbc.w	r3, r3, r1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002570:	4659      	mov	r1, fp
 8002572:	018b      	lsls	r3, r1, #6
 8002574:	4651      	mov	r1, sl
 8002576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800257a:	4651      	mov	r1, sl
 800257c:	018a      	lsls	r2, r1, #6
 800257e:	4651      	mov	r1, sl
 8002580:	ebb2 0801 	subs.w	r8, r2, r1
 8002584:	4659      	mov	r1, fp
 8002586:	eb63 0901 	sbc.w	r9, r3, r1
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800259a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259e:	4690      	mov	r8, r2
 80025a0:	4699      	mov	r9, r3
 80025a2:	4623      	mov	r3, r4
 80025a4:	eb18 0303 	adds.w	r3, r8, r3
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	462b      	mov	r3, r5
 80025ac:	eb49 0303 	adc.w	r3, r9, r3
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025be:	4629      	mov	r1, r5
 80025c0:	024b      	lsls	r3, r1, #9
 80025c2:	4621      	mov	r1, r4
 80025c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c8:	4621      	mov	r1, r4
 80025ca:	024a      	lsls	r2, r1, #9
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d2:	2200      	movs	r2, #0
 80025d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025dc:	f7fd fe58 	bl	8000290 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4613      	mov	r3, r2
 80025e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e8:	e058      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	4b38      	ldr	r3, [pc, #224]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	2200      	movs	r2, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	4611      	mov	r1, r2
 80025f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025fa:	623b      	str	r3, [r7, #32]
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002600:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002604:	4642      	mov	r2, r8
 8002606:	464b      	mov	r3, r9
 8002608:	f04f 0000 	mov.w	r0, #0
 800260c:	f04f 0100 	mov.w	r1, #0
 8002610:	0159      	lsls	r1, r3, #5
 8002612:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002616:	0150      	lsls	r0, r2, #5
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4641      	mov	r1, r8
 800261e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002622:	4649      	mov	r1, r9
 8002624:	eb63 0b01 	sbc.w	fp, r3, r1
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002634:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002638:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800263c:	ebb2 040a 	subs.w	r4, r2, sl
 8002640:	eb63 050b 	sbc.w	r5, r3, fp
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	00eb      	lsls	r3, r5, #3
 800264e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002652:	00e2      	lsls	r2, r4, #3
 8002654:	4614      	mov	r4, r2
 8002656:	461d      	mov	r5, r3
 8002658:	4643      	mov	r3, r8
 800265a:	18e3      	adds	r3, r4, r3
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	464b      	mov	r3, r9
 8002660:	eb45 0303 	adc.w	r3, r5, r3
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002672:	4629      	mov	r1, r5
 8002674:	028b      	lsls	r3, r1, #10
 8002676:	4621      	mov	r1, r4
 8002678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800267c:	4621      	mov	r1, r4
 800267e:	028a      	lsls	r2, r1, #10
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002686:	2200      	movs	r2, #0
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	61fa      	str	r2, [r7, #28]
 800268c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002690:	f7fd fdfe 	bl	8000290 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4613      	mov	r3, r2
 800269a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	3301      	adds	r3, #1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80026ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b6:	e002      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3750      	adds	r7, #80	@ 0x50
 80026c4:	46bd      	mov	sp, r7
 80026c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	00f42400 	.word	0x00f42400
 80026d4:	007a1200 	.word	0x007a1200

080026d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b03      	ldr	r3, [pc, #12]	@ (80026ec <HAL_RCC_GetHCLKFreq+0x14>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000000 	.word	0x20000000

080026f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f4:	f7ff fff0 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0a9b      	lsrs	r3, r3, #10
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	@ (8002714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	08006654 	.word	0x08006654

08002718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800271c:	f7ff ffdc 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	0b5b      	lsrs	r3, r3, #13
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4903      	ldr	r1, [pc, #12]	@ (800273c <HAL_RCC_GetPCLK2Freq+0x24>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40023800 	.word	0x40023800
 800273c:	08006654 	.word	0x08006654

08002740 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e042      	b.n	80027d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fad8 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2224      	movs	r2, #36	@ 0x24
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f973 	bl	8002a70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	@ 0x28
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	4613      	mov	r3, r2
 80027ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d175      	bne.n	80028ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_UART_Transmit+0x2c>
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e06e      	b.n	80028ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2221      	movs	r2, #33	@ 0x21
 800281a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281e:	f7fe fb55 	bl	8000ecc <HAL_GetTick>
 8002822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002838:	d108      	bne.n	800284c <HAL_UART_Transmit+0x6c>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d104      	bne.n	800284c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	e003      	b.n	8002854 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002854:	e02e      	b.n	80028b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2200      	movs	r2, #0
 800285e:	2180      	movs	r1, #128	@ 0x80
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f848 	bl	80028f6 <UART_WaitOnFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e03a      	b.n	80028ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10b      	bne.n	8002896 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800288c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	3302      	adds	r3, #2
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	e007      	b.n	80028a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	3301      	adds	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1cb      	bne.n	8002856 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2140      	movs	r1, #64	@ 0x40
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f814 	bl	80028f6 <UART_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e006      	b.n	80028ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	e000      	b.n	80028ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028ec:	2302      	movs	r3, #2
  }
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002906:	e03b      	b.n	8002980 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d037      	beq.n	8002980 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002910:	f7fe fadc 	bl	8000ecc <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	6a3a      	ldr	r2, [r7, #32]
 800291c:	429a      	cmp	r2, r3
 800291e:	d302      	bcc.n	8002926 <UART_WaitOnFlagUntilTimeout+0x30>
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e03a      	b.n	80029a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d023      	beq.n	8002980 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b80      	cmp	r3, #128	@ 0x80
 800293c:	d020      	beq.n	8002980 <UART_WaitOnFlagUntilTimeout+0x8a>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b40      	cmp	r3, #64	@ 0x40
 8002942:	d01d      	beq.n	8002980 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b08      	cmp	r3, #8
 8002950:	d116      	bne.n	8002980 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f81d 	bl	80029a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2208      	movs	r2, #8
 8002972:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e00f      	b.n	80029a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	4013      	ands	r3, r2
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	429a      	cmp	r2, r3
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	429a      	cmp	r2, r3
 800299c:	d0b4      	beq.n	8002908 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b095      	sub	sp, #84	@ 0x54
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	330c      	adds	r3, #12
 80029b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ba:	e853 3f00 	ldrex	r3, [r3]
 80029be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	330c      	adds	r3, #12
 80029ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80029d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029d8:	e841 2300 	strex	r3, r2, [r1]
 80029dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e5      	bne.n	80029b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3314      	adds	r3, #20
 80029ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	e853 3f00 	ldrex	r3, [r3]
 80029f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3314      	adds	r3, #20
 8002a02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a0c:	e841 2300 	strex	r3, r2, [r1]
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e5      	bne.n	80029e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d119      	bne.n	8002a54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	330c      	adds	r3, #12
 8002a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	e853 3f00 	ldrex	r3, [r3]
 8002a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f023 0310 	bic.w	r3, r3, #16
 8002a36:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a40:	61ba      	str	r2, [r7, #24]
 8002a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a44:	6979      	ldr	r1, [r7, #20]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	e841 2300 	strex	r3, r2, [r1]
 8002a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1e5      	bne.n	8002a20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a62:	bf00      	nop
 8002a64:	3754      	adds	r7, #84	@ 0x54
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a74:	b0c0      	sub	sp, #256	@ 0x100
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8c:	68d9      	ldr	r1, [r3, #12]
 8002a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	ea40 0301 	orr.w	r3, r0, r1
 8002a98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ac8:	f021 010c 	bic.w	r1, r1, #12
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aea:	6999      	ldr	r1, [r3, #24]
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	ea40 0301 	orr.w	r3, r0, r1
 8002af6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b8f      	ldr	r3, [pc, #572]	@ (8002d3c <UART_SetConfig+0x2cc>)
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d005      	beq.n	8002b10 <UART_SetConfig+0xa0>
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4b8d      	ldr	r3, [pc, #564]	@ (8002d40 <UART_SetConfig+0x2d0>)
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d104      	bne.n	8002b1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b10:	f7ff fe02 	bl	8002718 <HAL_RCC_GetPCLK2Freq>
 8002b14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b18:	e003      	b.n	8002b22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b1a:	f7ff fde9 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 8002b1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b2c:	f040 810c 	bne.w	8002d48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b34:	2200      	movs	r2, #0
 8002b36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b42:	4622      	mov	r2, r4
 8002b44:	462b      	mov	r3, r5
 8002b46:	1891      	adds	r1, r2, r2
 8002b48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b4a:	415b      	adcs	r3, r3
 8002b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b52:	4621      	mov	r1, r4
 8002b54:	eb12 0801 	adds.w	r8, r2, r1
 8002b58:	4629      	mov	r1, r5
 8002b5a:	eb43 0901 	adc.w	r9, r3, r1
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b72:	4690      	mov	r8, r2
 8002b74:	4699      	mov	r9, r3
 8002b76:	4623      	mov	r3, r4
 8002b78:	eb18 0303 	adds.w	r3, r8, r3
 8002b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b80:	462b      	mov	r3, r5
 8002b82:	eb49 0303 	adc.w	r3, r9, r3
 8002b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	18db      	adds	r3, r3, r3
 8002ba2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	eb42 0303 	adc.w	r3, r2, r3
 8002baa:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002bb4:	f7fd fb6c 	bl	8000290 <__aeabi_uldivmod>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4b61      	ldr	r3, [pc, #388]	@ (8002d44 <UART_SetConfig+0x2d4>)
 8002bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	011c      	lsls	r4, r3, #4
 8002bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002bd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002bd8:	4642      	mov	r2, r8
 8002bda:	464b      	mov	r3, r9
 8002bdc:	1891      	adds	r1, r2, r2
 8002bde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002be0:	415b      	adcs	r3, r3
 8002be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002be8:	4641      	mov	r1, r8
 8002bea:	eb12 0a01 	adds.w	sl, r2, r1
 8002bee:	4649      	mov	r1, r9
 8002bf0:	eb43 0b01 	adc.w	fp, r3, r1
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c08:	4692      	mov	sl, r2
 8002c0a:	469b      	mov	fp, r3
 8002c0c:	4643      	mov	r3, r8
 8002c0e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c16:	464b      	mov	r3, r9
 8002c18:	eb4b 0303 	adc.w	r3, fp, r3
 8002c1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c34:	460b      	mov	r3, r1
 8002c36:	18db      	adds	r3, r3, r3
 8002c38:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	eb42 0303 	adc.w	r3, r2, r3
 8002c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c4a:	f7fd fb21 	bl	8000290 <__aeabi_uldivmod>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	4b3b      	ldr	r3, [pc, #236]	@ (8002d44 <UART_SetConfig+0x2d4>)
 8002c56:	fba3 2301 	umull	r2, r3, r3, r1
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2264      	movs	r2, #100	@ 0x64
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	1acb      	subs	r3, r1, r3
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c6a:	4b36      	ldr	r3, [pc, #216]	@ (8002d44 <UART_SetConfig+0x2d4>)
 8002c6c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c78:	441c      	add	r4, r3
 8002c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	464b      	mov	r3, r9
 8002c90:	1891      	adds	r1, r2, r2
 8002c92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c94:	415b      	adcs	r3, r3
 8002c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	1851      	adds	r1, r2, r1
 8002ca0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	414b      	adcs	r3, r1
 8002ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002cb4:	4659      	mov	r1, fp
 8002cb6:	00cb      	lsls	r3, r1, #3
 8002cb8:	4651      	mov	r1, sl
 8002cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cbe:	4651      	mov	r1, sl
 8002cc0:	00ca      	lsls	r2, r1, #3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4642      	mov	r2, r8
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cd0:	464b      	mov	r3, r9
 8002cd2:	460a      	mov	r2, r1
 8002cd4:	eb42 0303 	adc.w	r3, r2, r3
 8002cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ce8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002cec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	18db      	adds	r3, r3, r3
 8002cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	eb42 0303 	adc.w	r3, r2, r3
 8002cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d06:	f7fd fac3 	bl	8000290 <__aeabi_uldivmod>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d44 <UART_SetConfig+0x2d4>)
 8002d10:	fba3 1302 	umull	r1, r3, r3, r2
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	2164      	movs	r1, #100	@ 0x64
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	3332      	adds	r3, #50	@ 0x32
 8002d22:	4a08      	ldr	r2, [pc, #32]	@ (8002d44 <UART_SetConfig+0x2d4>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	f003 0207 	and.w	r2, r3, #7
 8002d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4422      	add	r2, r4
 8002d36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d38:	e106      	b.n	8002f48 <UART_SetConfig+0x4d8>
 8002d3a:	bf00      	nop
 8002d3c:	40011000 	.word	0x40011000
 8002d40:	40011400 	.word	0x40011400
 8002d44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d5a:	4642      	mov	r2, r8
 8002d5c:	464b      	mov	r3, r9
 8002d5e:	1891      	adds	r1, r2, r2
 8002d60:	6239      	str	r1, [r7, #32]
 8002d62:	415b      	adcs	r3, r3
 8002d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d6a:	4641      	mov	r1, r8
 8002d6c:	1854      	adds	r4, r2, r1
 8002d6e:	4649      	mov	r1, r9
 8002d70:	eb43 0501 	adc.w	r5, r3, r1
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	00eb      	lsls	r3, r5, #3
 8002d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d82:	00e2      	lsls	r2, r4, #3
 8002d84:	4614      	mov	r4, r2
 8002d86:	461d      	mov	r5, r3
 8002d88:	4643      	mov	r3, r8
 8002d8a:	18e3      	adds	r3, r4, r3
 8002d8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d90:	464b      	mov	r3, r9
 8002d92:	eb45 0303 	adc.w	r3, r5, r3
 8002d96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002da6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002db6:	4629      	mov	r1, r5
 8002db8:	008b      	lsls	r3, r1, #2
 8002dba:	4621      	mov	r1, r4
 8002dbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	008a      	lsls	r2, r1, #2
 8002dc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002dc8:	f7fd fa62 	bl	8000290 <__aeabi_uldivmod>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4b60      	ldr	r3, [pc, #384]	@ (8002f54 <UART_SetConfig+0x4e4>)
 8002dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	011c      	lsls	r4, r3, #4
 8002dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002de4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002de8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	1891      	adds	r1, r2, r2
 8002df2:	61b9      	str	r1, [r7, #24]
 8002df4:	415b      	adcs	r3, r3
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	1851      	adds	r1, r2, r1
 8002e00:	6139      	str	r1, [r7, #16]
 8002e02:	4649      	mov	r1, r9
 8002e04:	414b      	adcs	r3, r1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e14:	4659      	mov	r1, fp
 8002e16:	00cb      	lsls	r3, r1, #3
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1e:	4651      	mov	r1, sl
 8002e20:	00ca      	lsls	r2, r1, #3
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	4642      	mov	r2, r8
 8002e2a:	189b      	adds	r3, r3, r2
 8002e2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e30:	464b      	mov	r3, r9
 8002e32:	460a      	mov	r2, r1
 8002e34:	eb42 0303 	adc.w	r3, r2, r3
 8002e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e54:	4649      	mov	r1, r9
 8002e56:	008b      	lsls	r3, r1, #2
 8002e58:	4641      	mov	r1, r8
 8002e5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e5e:	4641      	mov	r1, r8
 8002e60:	008a      	lsls	r2, r1, #2
 8002e62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e66:	f7fd fa13 	bl	8000290 <__aeabi_uldivmod>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4b38      	ldr	r3, [pc, #224]	@ (8002f54 <UART_SetConfig+0x4e4>)
 8002e72:	fba3 2301 	umull	r2, r3, r3, r1
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2264      	movs	r2, #100	@ 0x64
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	1acb      	subs	r3, r1, r3
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	3332      	adds	r3, #50	@ 0x32
 8002e84:	4a33      	ldr	r2, [pc, #204]	@ (8002f54 <UART_SetConfig+0x4e4>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e90:	441c      	add	r4, r3
 8002e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e96:	2200      	movs	r2, #0
 8002e98:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ea0:	4642      	mov	r2, r8
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	1891      	adds	r1, r2, r2
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	415b      	adcs	r3, r3
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	1851      	adds	r1, r2, r1
 8002eb4:	6039      	str	r1, [r7, #0]
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	414b      	adcs	r3, r1
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ec8:	4659      	mov	r1, fp
 8002eca:	00cb      	lsls	r3, r1, #3
 8002ecc:	4651      	mov	r1, sl
 8002ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	00ca      	lsls	r2, r1, #3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	4642      	mov	r2, r8
 8002ede:	189b      	adds	r3, r3, r2
 8002ee0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	460a      	mov	r2, r1
 8002ee6:	eb42 0303 	adc.w	r3, r2, r3
 8002eea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ef6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f04:	4649      	mov	r1, r9
 8002f06:	008b      	lsls	r3, r1, #2
 8002f08:	4641      	mov	r1, r8
 8002f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f0e:	4641      	mov	r1, r8
 8002f10:	008a      	lsls	r2, r1, #2
 8002f12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f16:	f7fd f9bb 	bl	8000290 <__aeabi_uldivmod>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f54 <UART_SetConfig+0x4e4>)
 8002f20:	fba3 1302 	umull	r1, r3, r3, r2
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	2164      	movs	r1, #100	@ 0x64
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	3332      	adds	r3, #50	@ 0x32
 8002f32:	4a08      	ldr	r2, [pc, #32]	@ (8002f54 <UART_SetConfig+0x4e4>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	f003 020f 	and.w	r2, r3, #15
 8002f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4422      	add	r2, r4
 8002f46:	609a      	str	r2, [r3, #8]
}
 8002f48:	bf00      	nop
 8002f4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f54:	51eb851f 	.word	0x51eb851f

08002f58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6a:	2b84      	cmp	r3, #132	@ 0x84
 8002f6c:	d005      	beq.n	8002f7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002f6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4413      	add	r3, r2
 8002f76:	3303      	adds	r3, #3
 8002f78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f8c:	f001 f914 	bl	80041b8 <vTaskStartScheduler>
  
  return osOK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f98:	b089      	sub	sp, #36	@ 0x24
 8002f9a:	af04      	add	r7, sp, #16
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d020      	beq.n	8002fea <osThreadCreate+0x54>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01c      	beq.n	8002fea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685c      	ldr	r4, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691e      	ldr	r6, [r3, #16]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff ffc8 	bl	8002f58 <makeFreeRtosPriority>
 8002fc8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fd2:	9202      	str	r2, [sp, #8]
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	9100      	str	r1, [sp, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4632      	mov	r2, r6
 8002fdc:	4629      	mov	r1, r5
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f000 ff04 	bl	8003dec <xTaskCreateStatic>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	e01c      	b.n	8003024 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685c      	ldr	r4, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ff6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ffaa 	bl	8002f58 <makeFreeRtosPriority>
 8003004:	4602      	mov	r2, r0
 8003006:	f107 030c 	add.w	r3, r7, #12
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	9200      	str	r2, [sp, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	4632      	mov	r2, r6
 8003012:	4629      	mov	r1, r5
 8003014:	4620      	mov	r0, r4
 8003016:	f000 ff49 	bl	8003eac <xTaskCreate>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d001      	beq.n	8003024 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003024:	68fb      	ldr	r3, [r7, #12]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800302e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <osDelay+0x16>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	e000      	b.n	8003046 <osDelay+0x18>
 8003044:	2301      	movs	r3, #1
 8003046:	4618      	mov	r0, r3
 8003048:	f001 f880 	bl	800414c <vTaskDelay>
  
  return osOK;
 800304c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f103 0208 	add.w	r2, r3, #8
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f04f 32ff 	mov.w	r2, #4294967295
 800306e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f103 0208 	add.w	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f103 0208 	add.w	r2, r3, #8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	601a      	str	r2, [r3, #0]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d103      	bne.n	8003118 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e00c      	b.n	8003132 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3308      	adds	r3, #8
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e002      	b.n	8003126 <vListInsert+0x2e>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d2f6      	bcs.n	8003120 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	601a      	str	r2, [r3, #0]
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800316a:	b480      	push	{r7}
 800316c:	b085      	sub	sp, #20
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6892      	ldr	r2, [r2, #8]
 8003180:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6852      	ldr	r2, [r2, #4]
 800318a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d103      	bne.n	800319e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031e6:	bf00      	nop
 80031e8:	bf00      	nop
 80031ea:	e7fd      	b.n	80031e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031ec:	f002 f9cc 	bl	8005588 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f8:	68f9      	ldr	r1, [r7, #12]
 80031fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	441a      	add	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321c:	3b01      	subs	r3, #1
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	22ff      	movs	r2, #255	@ 0xff
 8003230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	22ff      	movs	r2, #255	@ 0xff
 8003238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d114      	bne.n	800326c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01a      	beq.n	8003280 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3310      	adds	r3, #16
 800324e:	4618      	mov	r0, r3
 8003250:	f001 fa56 	bl	8004700 <xTaskRemoveFromEventList>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d012      	beq.n	8003280 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800325a:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <xQueueGenericReset+0xd0>)
 800325c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	e009      	b.n	8003280 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3310      	adds	r3, #16
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fef0 	bl	8003056 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3324      	adds	r3, #36	@ 0x24
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff feeb 	bl	8003056 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003280:	f002 f9b4 	bl	80055ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003284:	2301      	movs	r3, #1
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	e000ed04 	.word	0xe000ed04

08003294 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08e      	sub	sp, #56	@ 0x38
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80032ba:	bf00      	nop
 80032bc:	bf00      	nop
 80032be:	e7fd      	b.n	80032bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	e7fd      	b.n	80032da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <xQueueGenericCreateStatic+0x56>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <xQueueGenericCreateStatic+0x5a>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <xQueueGenericCreateStatic+0x5c>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	623b      	str	r3, [r7, #32]
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	e7fd      	b.n	8003308 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <xQueueGenericCreateStatic+0x84>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <xQueueGenericCreateStatic+0x88>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <xQueueGenericCreateStatic+0x8a>
 800331c:	2300      	movs	r3, #0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	61fb      	str	r3, [r7, #28]
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	e7fd      	b.n	8003336 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800333a:	2348      	movs	r3, #72	@ 0x48
 800333c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b48      	cmp	r3, #72	@ 0x48
 8003342:	d00b      	beq.n	800335c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	61bb      	str	r3, [r7, #24]
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	e7fd      	b.n	8003358 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800335c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003370:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f840 	bl	8003404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003386:	4618      	mov	r0, r3
 8003388:	3730      	adds	r7, #48	@ 0x30
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800338e:	b580      	push	{r7, lr}
 8003390:	b08a      	sub	sp, #40	@ 0x28
 8003392:	af02      	add	r7, sp, #8
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	4613      	mov	r3, r2
 800339a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <xQueueGenericCreate+0x2c>
	__asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	613b      	str	r3, [r7, #16]
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	e7fd      	b.n	80033b6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	3348      	adds	r3, #72	@ 0x48
 80033c8:	4618      	mov	r0, r3
 80033ca:	f002 f9ff 	bl	80057cc <pvPortMalloc>
 80033ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d011      	beq.n	80033fa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	3348      	adds	r3, #72	@ 0x48
 80033de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033e8:	79fa      	ldrb	r2, [r7, #7]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	4613      	mov	r3, r2
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f805 	bl	8003404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033fa:	69bb      	ldr	r3, [r7, #24]
	}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e002      	b.n	8003426 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003432:	2101      	movs	r1, #1
 8003434:	69b8      	ldr	r0, [r7, #24]
 8003436:	f7ff fec3 	bl	80031c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08e      	sub	sp, #56	@ 0x38
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003452:	2300      	movs	r3, #0
 8003454:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <xQueueGenericSend+0x34>
	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003472:	bf00      	nop
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <xQueueGenericSend+0x42>
 800347e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <xQueueGenericSend+0x46>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <xQueueGenericSend+0x48>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10b      	bne.n	80034a8 <xQueueGenericSend+0x64>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d103      	bne.n	80034b6 <xQueueGenericSend+0x72>
 80034ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <xQueueGenericSend+0x76>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <xQueueGenericSend+0x78>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <xQueueGenericSend+0x94>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	623b      	str	r3, [r7, #32]
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034d8:	f001 fada 	bl	8004a90 <xTaskGetSchedulerState>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <xQueueGenericSend+0xa4>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <xQueueGenericSend+0xa8>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <xQueueGenericSend+0xaa>
 80034ec:	2300      	movs	r3, #0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <xQueueGenericSend+0xc6>
	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	61fb      	str	r3, [r7, #28]
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	e7fd      	b.n	8003506 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800350a:	f002 f83d 	bl	8005588 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003516:	429a      	cmp	r2, r3
 8003518:	d302      	bcc.n	8003520 <xQueueGenericSend+0xdc>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d129      	bne.n	8003574 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003526:	f000 faf3 	bl	8003b10 <prvCopyDataToQueue>
 800352a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	2b00      	cmp	r3, #0
 8003532:	d010      	beq.n	8003556 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003536:	3324      	adds	r3, #36	@ 0x24
 8003538:	4618      	mov	r0, r3
 800353a:	f001 f8e1 	bl	8004700 <xTaskRemoveFromEventList>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d013      	beq.n	800356c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003544:	4b3f      	ldr	r3, [pc, #252]	@ (8003644 <xQueueGenericSend+0x200>)
 8003546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	e00a      	b.n	800356c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800355c:	4b39      	ldr	r3, [pc, #228]	@ (8003644 <xQueueGenericSend+0x200>)
 800355e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800356c:	f002 f83e 	bl	80055ec <vPortExitCritical>
				return pdPASS;
 8003570:	2301      	movs	r3, #1
 8003572:	e063      	b.n	800363c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800357a:	f002 f837 	bl	80055ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800357e:	2300      	movs	r3, #0
 8003580:	e05c      	b.n	800363c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4618      	mov	r0, r3
 800358e:	f001 f91b 	bl	80047c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003592:	2301      	movs	r3, #1
 8003594:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003596:	f002 f829 	bl	80055ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800359a:	f000 fe7d 	bl	8004298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800359e:	f001 fff3 	bl	8005588 <vPortEnterCritical>
 80035a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035a8:	b25b      	sxtb	r3, r3
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d103      	bne.n	80035b8 <xQueueGenericSend+0x174>
 80035b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035be:	b25b      	sxtb	r3, r3
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d103      	bne.n	80035ce <xQueueGenericSend+0x18a>
 80035c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035ce:	f002 f80d 	bl	80055ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035d2:	1d3a      	adds	r2, r7, #4
 80035d4:	f107 0314 	add.w	r3, r7, #20
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 f90a 	bl	80047f4 <xTaskCheckForTimeOut>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d124      	bne.n	8003630 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035e8:	f000 fb8a 	bl	8003d00 <prvIsQueueFull>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d018      	beq.n	8003624 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	3310      	adds	r3, #16
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 f82e 	bl	800465c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003602:	f000 fb15 	bl	8003c30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003606:	f000 fe55 	bl	80042b4 <xTaskResumeAll>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f af7c 	bne.w	800350a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003612:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <xQueueGenericSend+0x200>)
 8003614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	e772      	b.n	800350a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003626:	f000 fb03 	bl	8003c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800362a:	f000 fe43 	bl	80042b4 <xTaskResumeAll>
 800362e:	e76c      	b.n	800350a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003630:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003632:	f000 fafd 	bl	8003c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003636:	f000 fe3d 	bl	80042b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800363a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800363c:	4618      	mov	r0, r3
 800363e:	3738      	adds	r7, #56	@ 0x38
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b090      	sub	sp, #64	@ 0x40
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003672:	bf00      	nop
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d103      	bne.n	8003686 <xQueueGenericSendFromISR+0x3e>
 800367e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <xQueueGenericSendFromISR+0x42>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <xQueueGenericSendFromISR+0x44>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80036a2:	bf00      	nop
 80036a4:	bf00      	nop
 80036a6:	e7fd      	b.n	80036a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d103      	bne.n	80036b6 <xQueueGenericSendFromISR+0x6e>
 80036ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <xQueueGenericSendFromISR+0x72>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <xQueueGenericSendFromISR+0x74>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	623b      	str	r3, [r7, #32]
}
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	e7fd      	b.n	80036d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036d8:	f002 f836 	bl	8005748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036dc:	f3ef 8211 	mrs	r2, BASEPRI
 80036e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	61fa      	str	r2, [r7, #28]
 80036f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003700:	429a      	cmp	r2, r3
 8003702:	d302      	bcc.n	800370a <xQueueGenericSendFromISR+0xc2>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d12f      	bne.n	800376a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800370a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003710:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003720:	f000 f9f6 	bl	8003b10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003724:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d112      	bne.n	8003754 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800372e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003738:	3324      	adds	r3, #36	@ 0x24
 800373a:	4618      	mov	r0, r3
 800373c:	f000 ffe0 	bl	8004700 <xTaskRemoveFromEventList>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00e      	beq.n	8003764 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00b      	beq.n	8003764 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e007      	b.n	8003764 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003754:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003758:	3301      	adds	r3, #1
 800375a:	b2db      	uxtb	r3, r3
 800375c:	b25a      	sxtb	r2, r3
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003764:	2301      	movs	r3, #1
 8003766:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003768:	e001      	b.n	800376e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800376a:	2300      	movs	r3, #0
 800376c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800376e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003770:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003778:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800377a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800377c:	4618      	mov	r0, r3
 800377e:	3740      	adds	r7, #64	@ 0x40
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	@ 0x30
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003790:	2300      	movs	r3, #0
 8003792:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <xQueueReceive+0x32>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	623b      	str	r3, [r7, #32]
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	e7fd      	b.n	80037b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d103      	bne.n	80037c4 <xQueueReceive+0x40>
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <xQueueReceive+0x44>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <xQueueReceive+0x46>
 80037c8:	2300      	movs	r3, #0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10b      	bne.n	80037e6 <xQueueReceive+0x62>
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	61fb      	str	r3, [r7, #28]
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	e7fd      	b.n	80037e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037e6:	f001 f953 	bl	8004a90 <xTaskGetSchedulerState>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <xQueueReceive+0x72>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <xQueueReceive+0x76>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <xQueueReceive+0x78>
 80037fa:	2300      	movs	r3, #0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10b      	bne.n	8003818 <xQueueReceive+0x94>
	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	61bb      	str	r3, [r7, #24]
}
 8003812:	bf00      	nop
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003818:	f001 feb6 	bl	8005588 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01f      	beq.n	8003868 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800382c:	f000 f9da 	bl	8003be4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003836:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00f      	beq.n	8003860 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	3310      	adds	r3, #16
 8003844:	4618      	mov	r0, r3
 8003846:	f000 ff5b 	bl	8004700 <xTaskRemoveFromEventList>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003850:	4b3c      	ldr	r3, [pc, #240]	@ (8003944 <xQueueReceive+0x1c0>)
 8003852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003860:	f001 fec4 	bl	80055ec <vPortExitCritical>
				return pdPASS;
 8003864:	2301      	movs	r3, #1
 8003866:	e069      	b.n	800393c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800386e:	f001 febd 	bl	80055ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003872:	2300      	movs	r3, #0
 8003874:	e062      	b.n	800393c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800387c:	f107 0310 	add.w	r3, r7, #16
 8003880:	4618      	mov	r0, r3
 8003882:	f000 ffa1 	bl	80047c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003886:	2301      	movs	r3, #1
 8003888:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800388a:	f001 feaf 	bl	80055ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800388e:	f000 fd03 	bl	8004298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003892:	f001 fe79 	bl	8005588 <vPortEnterCritical>
 8003896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800389c:	b25b      	sxtb	r3, r3
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a2:	d103      	bne.n	80038ac <xQueueReceive+0x128>
 80038a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038b2:	b25b      	sxtb	r3, r3
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d103      	bne.n	80038c2 <xQueueReceive+0x13e>
 80038ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038c2:	f001 fe93 	bl	80055ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038c6:	1d3a      	adds	r2, r7, #4
 80038c8:	f107 0310 	add.w	r3, r7, #16
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 ff90 	bl	80047f4 <xTaskCheckForTimeOut>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d123      	bne.n	8003922 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038dc:	f000 f9fa 	bl	8003cd4 <prvIsQueueEmpty>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d017      	beq.n	8003916 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e8:	3324      	adds	r3, #36	@ 0x24
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 feb4 	bl	800465c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038f6:	f000 f99b 	bl	8003c30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038fa:	f000 fcdb 	bl	80042b4 <xTaskResumeAll>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d189      	bne.n	8003818 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003904:	4b0f      	ldr	r3, [pc, #60]	@ (8003944 <xQueueReceive+0x1c0>)
 8003906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	e780      	b.n	8003818 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003918:	f000 f98a 	bl	8003c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800391c:	f000 fcca 	bl	80042b4 <xTaskResumeAll>
 8003920:	e77a      	b.n	8003818 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003924:	f000 f984 	bl	8003c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003928:	f000 fcc4 	bl	80042b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800392c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800392e:	f000 f9d1 	bl	8003cd4 <prvIsQueueEmpty>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	f43f af6f 	beq.w	8003818 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800393a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800393c:	4618      	mov	r0, r3
 800393e:	3730      	adds	r7, #48	@ 0x30
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08e      	sub	sp, #56	@ 0x38
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003954:	2300      	movs	r3, #0
 8003956:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10b      	bne.n	800397a <xQueuePeek+0x32>
	__asm volatile
 8003962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	e7fd      	b.n	8003976 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <xQueuePeek+0x40>
 8003980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <xQueuePeek+0x44>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <xQueuePeek+0x46>
 800398c:	2300      	movs	r3, #0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <xQueuePeek+0x62>
	__asm volatile
 8003992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	623b      	str	r3, [r7, #32]
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	e7fd      	b.n	80039a6 <xQueuePeek+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039aa:	f001 f871 	bl	8004a90 <xTaskGetSchedulerState>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <xQueuePeek+0x72>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <xQueuePeek+0x76>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <xQueuePeek+0x78>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10b      	bne.n	80039dc <xQueuePeek+0x94>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	61fb      	str	r3, [r7, #28]
}
 80039d6:	bf00      	nop
 80039d8:	bf00      	nop
 80039da:	e7fd      	b.n	80039d8 <xQueuePeek+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039dc:	f001 fdd4 	bl	8005588 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d021      	beq.n	8003a30 <xQueuePeek+0xe8>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039f6:	f000 f8f5 	bl	8003be4 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80039fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039fe:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00f      	beq.n	8003a28 <xQueuePeek+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0a:	3324      	adds	r3, #36	@ 0x24
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fe77 	bl	8004700 <xTaskRemoveFromEventList>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <xQueuePeek+0xe0>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a18:	4b3c      	ldr	r3, [pc, #240]	@ (8003b0c <xQueuePeek+0x1c4>)
 8003a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a28:	f001 fde0 	bl	80055ec <vPortExitCritical>
				return pdPASS;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e069      	b.n	8003b04 <xQueuePeek+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <xQueuePeek+0xf6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a36:	f001 fdd9 	bl	80055ec <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e062      	b.n	8003b04 <xQueuePeek+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <xQueuePeek+0x10a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 febd 	bl	80047c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a52:	f001 fdcb 	bl	80055ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a56:	f000 fc1f 	bl	8004298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a5a:	f001 fd95 	bl	8005588 <vPortEnterCritical>
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a64:	b25b      	sxtb	r3, r3
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d103      	bne.n	8003a74 <xQueuePeek+0x12c>
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a7a:	b25b      	sxtb	r3, r3
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d103      	bne.n	8003a8a <xQueuePeek+0x142>
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a8a:	f001 fdaf 	bl	80055ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a8e:	1d3a      	adds	r2, r7, #4
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 feac 	bl	80047f4 <xTaskCheckForTimeOut>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d123      	bne.n	8003aea <xQueuePeek+0x1a2>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aa2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003aa4:	f000 f916 	bl	8003cd4 <prvIsQueueEmpty>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d017      	beq.n	8003ade <xQueuePeek+0x196>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab0:	3324      	adds	r3, #36	@ 0x24
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fdd0 	bl	800465c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003abe:	f000 f8b7 	bl	8003c30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ac2:	f000 fbf7 	bl	80042b4 <xTaskResumeAll>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d187      	bne.n	80039dc <xQueuePeek+0x94>
				{
					portYIELD_WITHIN_API();
 8003acc:	4b0f      	ldr	r3, [pc, #60]	@ (8003b0c <xQueuePeek+0x1c4>)
 8003ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	e77e      	b.n	80039dc <xQueuePeek+0x94>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8003ade:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ae0:	f000 f8a6 	bl	8003c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ae4:	f000 fbe6 	bl	80042b4 <xTaskResumeAll>
 8003ae8:	e778      	b.n	80039dc <xQueuePeek+0x94>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8003aea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003aec:	f000 f8a0 	bl	8003c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003af0:	f000 fbe0 	bl	80042b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003af4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003af6:	f000 f8ed 	bl	8003cd4 <prvIsQueueEmpty>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f43f af6d 	beq.w	80039dc <xQueuePeek+0x94>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3738      	adds	r7, #56	@ 0x38
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10d      	bne.n	8003b4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d14d      	bne.n	8003bd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 ffc6 	bl	8004acc <xTaskPriorityDisinherit>
 8003b40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	e043      	b.n	8003bd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d119      	bne.n	8003b84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6858      	ldr	r0, [r3, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	461a      	mov	r2, r3
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	f002 f8de 	bl	8005d1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b68:	441a      	add	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d32b      	bcc.n	8003bd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	e026      	b.n	8003bd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	68d8      	ldr	r0, [r3, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	f002 f8c4 	bl	8005d1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	425b      	negs	r3, r3
 8003b9e:	441a      	add	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d207      	bcs.n	8003bc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	425b      	negs	r3, r3
 8003bba:	441a      	add	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d105      	bne.n	8003bd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003bda:	697b      	ldr	r3, [r7, #20]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d018      	beq.n	8003c28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	441a      	add	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d303      	bcc.n	8003c18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68d9      	ldr	r1, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	461a      	mov	r2, r3
 8003c22:	6838      	ldr	r0, [r7, #0]
 8003c24:	f002 f87a 	bl	8005d1c <memcpy>
	}
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c38:	f001 fca6 	bl	8005588 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c44:	e011      	b.n	8003c6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d012      	beq.n	8003c74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3324      	adds	r3, #36	@ 0x24
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fd54 	bl	8004700 <xTaskRemoveFromEventList>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c5e:	f000 fe2d 	bl	80048bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	dce9      	bgt.n	8003c46 <prvUnlockQueue+0x16>
 8003c72:	e000      	b.n	8003c76 <prvUnlockQueue+0x46>
					break;
 8003c74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	22ff      	movs	r2, #255	@ 0xff
 8003c7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003c7e:	f001 fcb5 	bl	80055ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c82:	f001 fc81 	bl	8005588 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c8e:	e011      	b.n	8003cb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d012      	beq.n	8003cbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3310      	adds	r3, #16
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fd2f 	bl	8004700 <xTaskRemoveFromEventList>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ca8:	f000 fe08 	bl	80048bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cac:	7bbb      	ldrb	r3, [r7, #14]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	dce9      	bgt.n	8003c90 <prvUnlockQueue+0x60>
 8003cbc:	e000      	b.n	8003cc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	22ff      	movs	r2, #255	@ 0xff
 8003cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003cc8:	f001 fc90 	bl	80055ec <vPortExitCritical>
}
 8003ccc:	bf00      	nop
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cdc:	f001 fc54 	bl	8005588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e001      	b.n	8003cf2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cf2:	f001 fc7b 	bl	80055ec <vPortExitCritical>

	return xReturn;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d08:	f001 fc3e 	bl	8005588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d102      	bne.n	8003d1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e001      	b.n	8003d22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d22:	f001 fc63 	bl	80055ec <vPortExitCritical>

	return xReturn;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e014      	b.n	8003d6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d40:	4a0f      	ldr	r2, [pc, #60]	@ (8003d80 <vQueueAddToRegistry+0x50>)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d4c:	490c      	ldr	r1, [pc, #48]	@ (8003d80 <vQueueAddToRegistry+0x50>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d56:	4a0a      	ldr	r2, [pc, #40]	@ (8003d80 <vQueueAddToRegistry+0x50>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d62:	e006      	b.n	8003d72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b07      	cmp	r3, #7
 8003d6e:	d9e7      	bls.n	8003d40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	2000086c 	.word	0x2000086c

08003d84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d94:	f001 fbf8 	bl	8005588 <vPortEnterCritical>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d9e:	b25b      	sxtb	r3, r3
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d103      	bne.n	8003dae <vQueueWaitForMessageRestricted+0x2a>
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d103      	bne.n	8003dc4 <vQueueWaitForMessageRestricted+0x40>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dc4:	f001 fc12 	bl	80055ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	3324      	adds	r3, #36	@ 0x24
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fc65 	bl	80046a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003dde:	6978      	ldr	r0, [r7, #20]
 8003de0:	f7ff ff26 	bl	8003c30 <prvUnlockQueue>
	}
 8003de4:	bf00      	nop
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08e      	sub	sp, #56	@ 0x38
 8003df0:	af04      	add	r7, sp, #16
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	623b      	str	r3, [r7, #32]
}
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
 8003e16:	e7fd      	b.n	8003e14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	61fb      	str	r3, [r7, #28]
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	e7fd      	b.n	8003e32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e36:	23a0      	movs	r3, #160	@ 0xa0
 8003e38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e3e:	d00b      	beq.n	8003e58 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	61bb      	str	r3, [r7, #24]
}
 8003e52:	bf00      	nop
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01e      	beq.n	8003e9e <xTaskCreateStatic+0xb2>
 8003e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01b      	beq.n	8003e9e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9303      	str	r3, [sp, #12]
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	9302      	str	r3, [sp, #8]
 8003e80:	f107 0314 	add.w	r3, r7, #20
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f851 	bl	8003f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e98:	f000 f8ee 	bl	8004078 <prvAddNewTaskToReadyList>
 8003e9c:	e001      	b.n	8003ea2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ea2:	697b      	ldr	r3, [r7, #20]
	}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3728      	adds	r7, #40	@ 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08c      	sub	sp, #48	@ 0x30
 8003eb0:	af04      	add	r7, sp, #16
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 fc83 	bl	80057cc <pvPortMalloc>
 8003ec6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00e      	beq.n	8003eec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ece:	20a0      	movs	r0, #160	@ 0xa0
 8003ed0:	f001 fc7c 	bl	80057cc <pvPortMalloc>
 8003ed4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ee2:	e005      	b.n	8003ef0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ee4:	6978      	ldr	r0, [r7, #20]
 8003ee6:	f001 fd45 	bl	8005974 <vPortFree>
 8003eea:	e001      	b.n	8003ef0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d017      	beq.n	8003f26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003efe:	88fa      	ldrh	r2, [r7, #6]
 8003f00:	2300      	movs	r3, #0
 8003f02:	9303      	str	r3, [sp, #12]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	9302      	str	r3, [sp, #8]
 8003f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f80f 	bl	8003f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f1a:	69f8      	ldr	r0, [r7, #28]
 8003f1c:	f000 f8ac 	bl	8004078 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f20:	2301      	movs	r3, #1
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	e002      	b.n	8003f2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f2c:	69bb      	ldr	r3, [r7, #24]
	}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f50:	3b01      	subs	r3, #1
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f023 0307 	bic.w	r3, r3, #7
 8003f5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	617b      	str	r3, [r7, #20]
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	e7fd      	b.n	8003f7e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01f      	beq.n	8003fc8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	e012      	b.n	8003fb4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	4413      	add	r3, r2
 8003f94:	7819      	ldrb	r1, [r3, #0]
 8003f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3334      	adds	r3, #52	@ 0x34
 8003f9e:	460a      	mov	r2, r1
 8003fa0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d006      	beq.n	8003fbc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	2b0f      	cmp	r3, #15
 8003fb8:	d9e9      	bls.n	8003f8e <prvInitialiseNewTask+0x56>
 8003fba:	e000      	b.n	8003fbe <prvInitialiseNewTask+0x86>
			{
				break;
 8003fbc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fc6:	e003      	b.n	8003fd0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d901      	bls.n	8003fda <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fd6:	2306      	movs	r3, #6
 8003fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fde:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	2200      	movs	r2, #0
 8003fea:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff f850 	bl	8003096 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff8:	3318      	adds	r3, #24
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff f84b 	bl	8003096 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004004:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	f1c3 0207 	rsb	r2, r3, #7
 800400c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004014:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004018:	2200      	movs	r2, #0
 800401a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800401e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004020:	2200      	movs	r2, #0
 8004022:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004028:	334c      	adds	r3, #76	@ 0x4c
 800402a:	224c      	movs	r2, #76	@ 0x4c
 800402c:	2100      	movs	r1, #0
 800402e:	4618      	mov	r0, r3
 8004030:	f001 fde2 	bl	8005bf8 <memset>
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	4a0d      	ldr	r2, [pc, #52]	@ (800406c <prvInitialiseNewTask+0x134>)
 8004038:	651a      	str	r2, [r3, #80]	@ 0x50
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	4a0c      	ldr	r2, [pc, #48]	@ (8004070 <prvInitialiseNewTask+0x138>)
 800403e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	4a0c      	ldr	r2, [pc, #48]	@ (8004074 <prvInitialiseNewTask+0x13c>)
 8004044:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	68f9      	ldr	r1, [r7, #12]
 800404a:	69b8      	ldr	r0, [r7, #24]
 800404c:	f001 f96c 	bl	8005328 <pxPortInitialiseStack>
 8004050:	4602      	mov	r2, r0
 8004052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004054:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800405c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004062:	bf00      	nop
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200046fc 	.word	0x200046fc
 8004070:	20004764 	.word	0x20004764
 8004074:	200047cc 	.word	0x200047cc

08004078 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004080:	f001 fa82 	bl	8005588 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004084:	4b2a      	ldr	r3, [pc, #168]	@ (8004130 <prvAddNewTaskToReadyList+0xb8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3301      	adds	r3, #1
 800408a:	4a29      	ldr	r2, [pc, #164]	@ (8004130 <prvAddNewTaskToReadyList+0xb8>)
 800408c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800408e:	4b29      	ldr	r3, [pc, #164]	@ (8004134 <prvAddNewTaskToReadyList+0xbc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004096:	4a27      	ldr	r2, [pc, #156]	@ (8004134 <prvAddNewTaskToReadyList+0xbc>)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800409c:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <prvAddNewTaskToReadyList+0xb8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d110      	bne.n	80040c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040a4:	f000 fc30 	bl	8004908 <prvInitialiseTaskLists>
 80040a8:	e00d      	b.n	80040c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040aa:	4b23      	ldr	r3, [pc, #140]	@ (8004138 <prvAddNewTaskToReadyList+0xc0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040b2:	4b20      	ldr	r3, [pc, #128]	@ (8004134 <prvAddNewTaskToReadyList+0xbc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	429a      	cmp	r2, r3
 80040be:	d802      	bhi.n	80040c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004134 <prvAddNewTaskToReadyList+0xbc>)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040c6:	4b1d      	ldr	r3, [pc, #116]	@ (800413c <prvAddNewTaskToReadyList+0xc4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3301      	adds	r3, #1
 80040cc:	4a1b      	ldr	r2, [pc, #108]	@ (800413c <prvAddNewTaskToReadyList+0xc4>)
 80040ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d4:	2201      	movs	r2, #1
 80040d6:	409a      	lsls	r2, r3
 80040d8:	4b19      	ldr	r3, [pc, #100]	@ (8004140 <prvAddNewTaskToReadyList+0xc8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4313      	orrs	r3, r2
 80040de:	4a18      	ldr	r2, [pc, #96]	@ (8004140 <prvAddNewTaskToReadyList+0xc8>)
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4a15      	ldr	r2, [pc, #84]	@ (8004144 <prvAddNewTaskToReadyList+0xcc>)
 80040f0:	441a      	add	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3304      	adds	r3, #4
 80040f6:	4619      	mov	r1, r3
 80040f8:	4610      	mov	r0, r2
 80040fa:	f7fe ffd9 	bl	80030b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040fe:	f001 fa75 	bl	80055ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004102:	4b0d      	ldr	r3, [pc, #52]	@ (8004138 <prvAddNewTaskToReadyList+0xc0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00e      	beq.n	8004128 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800410a:	4b0a      	ldr	r3, [pc, #40]	@ (8004134 <prvAddNewTaskToReadyList+0xbc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	429a      	cmp	r2, r3
 8004116:	d207      	bcs.n	8004128 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004118:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <prvAddNewTaskToReadyList+0xd0>)
 800411a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	200009ac 	.word	0x200009ac
 8004134:	200008ac 	.word	0x200008ac
 8004138:	200009b8 	.word	0x200009b8
 800413c:	200009c8 	.word	0x200009c8
 8004140:	200009b4 	.word	0x200009b4
 8004144:	200008b0 	.word	0x200008b0
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d018      	beq.n	8004190 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800415e:	4b14      	ldr	r3, [pc, #80]	@ (80041b0 <vTaskDelay+0x64>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00b      	beq.n	800417e <vTaskDelay+0x32>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	60bb      	str	r3, [r7, #8]
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	e7fd      	b.n	800417a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800417e:	f000 f88b 	bl	8004298 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004182:	2100      	movs	r1, #0
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fd29 	bl	8004bdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800418a:	f000 f893 	bl	80042b4 <xTaskResumeAll>
 800418e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d107      	bne.n	80041a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004196:	4b07      	ldr	r3, [pc, #28]	@ (80041b4 <vTaskDelay+0x68>)
 8004198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	200009d4 	.word	0x200009d4
 80041b4:	e000ed04 	.word	0xe000ed04

080041b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	@ 0x28
 80041bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041c6:	463a      	mov	r2, r7
 80041c8:	1d39      	adds	r1, r7, #4
 80041ca:	f107 0308 	add.w	r3, r7, #8
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc faae 	bl	8000730 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	9202      	str	r2, [sp, #8]
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	2300      	movs	r3, #0
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	2300      	movs	r3, #0
 80041e4:	460a      	mov	r2, r1
 80041e6:	4924      	ldr	r1, [pc, #144]	@ (8004278 <vTaskStartScheduler+0xc0>)
 80041e8:	4824      	ldr	r0, [pc, #144]	@ (800427c <vTaskStartScheduler+0xc4>)
 80041ea:	f7ff fdff 	bl	8003dec <xTaskCreateStatic>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4a23      	ldr	r2, [pc, #140]	@ (8004280 <vTaskStartScheduler+0xc8>)
 80041f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041f4:	4b22      	ldr	r3, [pc, #136]	@ (8004280 <vTaskStartScheduler+0xc8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041fc:	2301      	movs	r3, #1
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e001      	b.n	8004206 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d102      	bne.n	8004212 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800420c:	f000 fd4c 	bl	8004ca8 <xTimerCreateTimerTask>
 8004210:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d11b      	bne.n	8004250 <vTaskStartScheduler+0x98>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	613b      	str	r3, [r7, #16]
}
 800422a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800422c:	4b15      	ldr	r3, [pc, #84]	@ (8004284 <vTaskStartScheduler+0xcc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	334c      	adds	r3, #76	@ 0x4c
 8004232:	4a15      	ldr	r2, [pc, #84]	@ (8004288 <vTaskStartScheduler+0xd0>)
 8004234:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004236:	4b15      	ldr	r3, [pc, #84]	@ (800428c <vTaskStartScheduler+0xd4>)
 8004238:	f04f 32ff 	mov.w	r2, #4294967295
 800423c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800423e:	4b14      	ldr	r3, [pc, #80]	@ (8004290 <vTaskStartScheduler+0xd8>)
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004244:	4b13      	ldr	r3, [pc, #76]	@ (8004294 <vTaskStartScheduler+0xdc>)
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800424a:	f001 f8f9 	bl	8005440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800424e:	e00f      	b.n	8004270 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d10b      	bne.n	8004270 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	60fb      	str	r3, [r7, #12]
}
 800426a:	bf00      	nop
 800426c:	bf00      	nop
 800426e:	e7fd      	b.n	800426c <vTaskStartScheduler+0xb4>
}
 8004270:	bf00      	nop
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	0800662c 	.word	0x0800662c
 800427c:	080048d5 	.word	0x080048d5
 8004280:	200009d0 	.word	0x200009d0
 8004284:	200008ac 	.word	0x200008ac
 8004288:	20000010 	.word	0x20000010
 800428c:	200009cc 	.word	0x200009cc
 8004290:	200009b8 	.word	0x200009b8
 8004294:	200009b0 	.word	0x200009b0

08004298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800429c:	4b04      	ldr	r3, [pc, #16]	@ (80042b0 <vTaskSuspendAll+0x18>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	4a03      	ldr	r2, [pc, #12]	@ (80042b0 <vTaskSuspendAll+0x18>)
 80042a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80042a6:	bf00      	nop
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	200009d4 	.word	0x200009d4

080042b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042c2:	4b42      	ldr	r3, [pc, #264]	@ (80043cc <xTaskResumeAll+0x118>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	603b      	str	r3, [r7, #0]
}
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	e7fd      	b.n	80042de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042e2:	f001 f951 	bl	8005588 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042e6:	4b39      	ldr	r3, [pc, #228]	@ (80043cc <xTaskResumeAll+0x118>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	4a37      	ldr	r2, [pc, #220]	@ (80043cc <xTaskResumeAll+0x118>)
 80042ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f0:	4b36      	ldr	r3, [pc, #216]	@ (80043cc <xTaskResumeAll+0x118>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d161      	bne.n	80043bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042f8:	4b35      	ldr	r3, [pc, #212]	@ (80043d0 <xTaskResumeAll+0x11c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d05d      	beq.n	80043bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004300:	e02e      	b.n	8004360 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004302:	4b34      	ldr	r3, [pc, #208]	@ (80043d4 <xTaskResumeAll+0x120>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3318      	adds	r3, #24
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe ff2b 	bl	800316a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3304      	adds	r3, #4
 8004318:	4618      	mov	r0, r3
 800431a:	f7fe ff26 	bl	800316a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004322:	2201      	movs	r2, #1
 8004324:	409a      	lsls	r2, r3
 8004326:	4b2c      	ldr	r3, [pc, #176]	@ (80043d8 <xTaskResumeAll+0x124>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4313      	orrs	r3, r2
 800432c:	4a2a      	ldr	r2, [pc, #168]	@ (80043d8 <xTaskResumeAll+0x124>)
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4a27      	ldr	r2, [pc, #156]	@ (80043dc <xTaskResumeAll+0x128>)
 800433e:	441a      	add	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f7fe feb2 	bl	80030b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004350:	4b23      	ldr	r3, [pc, #140]	@ (80043e0 <xTaskResumeAll+0x12c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004356:	429a      	cmp	r2, r3
 8004358:	d302      	bcc.n	8004360 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800435a:	4b22      	ldr	r3, [pc, #136]	@ (80043e4 <xTaskResumeAll+0x130>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004360:	4b1c      	ldr	r3, [pc, #112]	@ (80043d4 <xTaskResumeAll+0x120>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1cc      	bne.n	8004302 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800436e:	f000 fb6f 	bl	8004a50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004372:	4b1d      	ldr	r3, [pc, #116]	@ (80043e8 <xTaskResumeAll+0x134>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800437e:	f000 f847 	bl	8004410 <xTaskIncrementTick>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004388:	4b16      	ldr	r3, [pc, #88]	@ (80043e4 <xTaskResumeAll+0x130>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3b01      	subs	r3, #1
 8004392:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f1      	bne.n	800437e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800439a:	4b13      	ldr	r3, [pc, #76]	@ (80043e8 <xTaskResumeAll+0x134>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043a0:	4b10      	ldr	r3, [pc, #64]	@ (80043e4 <xTaskResumeAll+0x130>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043a8:	2301      	movs	r3, #1
 80043aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043ac:	4b0f      	ldr	r3, [pc, #60]	@ (80043ec <xTaskResumeAll+0x138>)
 80043ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043bc:	f001 f916 	bl	80055ec <vPortExitCritical>

	return xAlreadyYielded;
 80043c0:	68bb      	ldr	r3, [r7, #8]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	200009d4 	.word	0x200009d4
 80043d0:	200009ac 	.word	0x200009ac
 80043d4:	2000096c 	.word	0x2000096c
 80043d8:	200009b4 	.word	0x200009b4
 80043dc:	200008b0 	.word	0x200008b0
 80043e0:	200008ac 	.word	0x200008ac
 80043e4:	200009c0 	.word	0x200009c0
 80043e8:	200009bc 	.word	0x200009bc
 80043ec:	e000ed04 	.word	0xe000ed04

080043f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043f6:	4b05      	ldr	r3, [pc, #20]	@ (800440c <xTaskGetTickCount+0x1c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043fc:	687b      	ldr	r3, [r7, #4]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	200009b0 	.word	0x200009b0

08004410 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800441a:	4b53      	ldr	r3, [pc, #332]	@ (8004568 <xTaskIncrementTick+0x158>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f040 8095 	bne.w	800454e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004424:	4b51      	ldr	r3, [pc, #324]	@ (800456c <xTaskIncrementTick+0x15c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800442c:	4a4f      	ldr	r2, [pc, #316]	@ (800456c <xTaskIncrementTick+0x15c>)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d121      	bne.n	800447c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004438:	4b4d      	ldr	r3, [pc, #308]	@ (8004570 <xTaskIncrementTick+0x160>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	603b      	str	r3, [r7, #0]
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	e7fd      	b.n	8004456 <xTaskIncrementTick+0x46>
 800445a:	4b45      	ldr	r3, [pc, #276]	@ (8004570 <xTaskIncrementTick+0x160>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	4b44      	ldr	r3, [pc, #272]	@ (8004574 <xTaskIncrementTick+0x164>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a42      	ldr	r2, [pc, #264]	@ (8004570 <xTaskIncrementTick+0x160>)
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4a42      	ldr	r2, [pc, #264]	@ (8004574 <xTaskIncrementTick+0x164>)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b42      	ldr	r3, [pc, #264]	@ (8004578 <xTaskIncrementTick+0x168>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3301      	adds	r3, #1
 8004474:	4a40      	ldr	r2, [pc, #256]	@ (8004578 <xTaskIncrementTick+0x168>)
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	f000 faea 	bl	8004a50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800447c:	4b3f      	ldr	r3, [pc, #252]	@ (800457c <xTaskIncrementTick+0x16c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	429a      	cmp	r2, r3
 8004484:	d348      	bcc.n	8004518 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004486:	4b3a      	ldr	r3, [pc, #232]	@ (8004570 <xTaskIncrementTick+0x160>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004490:	4b3a      	ldr	r3, [pc, #232]	@ (800457c <xTaskIncrementTick+0x16c>)
 8004492:	f04f 32ff 	mov.w	r2, #4294967295
 8004496:	601a      	str	r2, [r3, #0]
					break;
 8004498:	e03e      	b.n	8004518 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800449a:	4b35      	ldr	r3, [pc, #212]	@ (8004570 <xTaskIncrementTick+0x160>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d203      	bcs.n	80044ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044b2:	4a32      	ldr	r2, [pc, #200]	@ (800457c <xTaskIncrementTick+0x16c>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044b8:	e02e      	b.n	8004518 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	3304      	adds	r3, #4
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fe53 	bl	800316a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	3318      	adds	r3, #24
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fe fe4a 	bl	800316a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	2201      	movs	r2, #1
 80044dc:	409a      	lsls	r2, r3
 80044de:	4b28      	ldr	r3, [pc, #160]	@ (8004580 <xTaskIncrementTick+0x170>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	4a26      	ldr	r2, [pc, #152]	@ (8004580 <xTaskIncrementTick+0x170>)
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4a23      	ldr	r2, [pc, #140]	@ (8004584 <xTaskIncrementTick+0x174>)
 80044f6:	441a      	add	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f7fe fdd6 	bl	80030b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004508:	4b1f      	ldr	r3, [pc, #124]	@ (8004588 <xTaskIncrementTick+0x178>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450e:	429a      	cmp	r2, r3
 8004510:	d3b9      	bcc.n	8004486 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004512:	2301      	movs	r3, #1
 8004514:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004516:	e7b6      	b.n	8004486 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004518:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <xTaskIncrementTick+0x178>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451e:	4919      	ldr	r1, [pc, #100]	@ (8004584 <xTaskIncrementTick+0x174>)
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d901      	bls.n	8004534 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004530:	2301      	movs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8004534:	4b15      	ldr	r3, [pc, #84]	@ (800458c <xTaskIncrementTick+0x17c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800453c:	f7fc f8e3 	bl	8000706 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004540:	4b13      	ldr	r3, [pc, #76]	@ (8004590 <xTaskIncrementTick+0x180>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d009      	beq.n	800455c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8004548:	2301      	movs	r3, #1
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	e006      	b.n	800455c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800454e:	4b0f      	ldr	r3, [pc, #60]	@ (800458c <xTaskIncrementTick+0x17c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	4a0d      	ldr	r2, [pc, #52]	@ (800458c <xTaskIncrementTick+0x17c>)
 8004556:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8004558:	f7fc f8d5 	bl	8000706 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800455c:	697b      	ldr	r3, [r7, #20]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	200009d4 	.word	0x200009d4
 800456c:	200009b0 	.word	0x200009b0
 8004570:	20000964 	.word	0x20000964
 8004574:	20000968 	.word	0x20000968
 8004578:	200009c4 	.word	0x200009c4
 800457c:	200009cc 	.word	0x200009cc
 8004580:	200009b4 	.word	0x200009b4
 8004584:	200008b0 	.word	0x200008b0
 8004588:	200008ac 	.word	0x200008ac
 800458c:	200009bc 	.word	0x200009bc
 8004590:	200009c0 	.word	0x200009c0

08004594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800459a:	4b2a      	ldr	r3, [pc, #168]	@ (8004644 <vTaskSwitchContext+0xb0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045a2:	4b29      	ldr	r3, [pc, #164]	@ (8004648 <vTaskSwitchContext+0xb4>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045a8:	e045      	b.n	8004636 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80045aa:	4b27      	ldr	r3, [pc, #156]	@ (8004648 <vTaskSwitchContext+0xb4>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b0:	4b26      	ldr	r3, [pc, #152]	@ (800464c <vTaskSwitchContext+0xb8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80045be:	7afb      	ldrb	r3, [r7, #11]
 80045c0:	f1c3 031f 	rsb	r3, r3, #31
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	4922      	ldr	r1, [pc, #136]	@ (8004650 <vTaskSwitchContext+0xbc>)
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	607b      	str	r3, [r7, #4]
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	e7fd      	b.n	80045ee <vTaskSwitchContext+0x5a>
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4a14      	ldr	r2, [pc, #80]	@ (8004650 <vTaskSwitchContext+0xbc>)
 80045fe:	4413      	add	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	605a      	str	r2, [r3, #4]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	3308      	adds	r3, #8
 8004614:	429a      	cmp	r2, r3
 8004616:	d104      	bne.n	8004622 <vTaskSwitchContext+0x8e>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a0a      	ldr	r2, [pc, #40]	@ (8004654 <vTaskSwitchContext+0xc0>)
 800462a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800462c:	4b09      	ldr	r3, [pc, #36]	@ (8004654 <vTaskSwitchContext+0xc0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	334c      	adds	r3, #76	@ 0x4c
 8004632:	4a09      	ldr	r2, [pc, #36]	@ (8004658 <vTaskSwitchContext+0xc4>)
 8004634:	6013      	str	r3, [r2, #0]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	200009d4 	.word	0x200009d4
 8004648:	200009c0 	.word	0x200009c0
 800464c:	200009b4 	.word	0x200009b4
 8004650:	200008b0 	.word	0x200008b0
 8004654:	200008ac 	.word	0x200008ac
 8004658:	20000010 	.word	0x20000010

0800465c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	60fb      	str	r3, [r7, #12]
}
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	e7fd      	b.n	8004680 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004684:	4b07      	ldr	r3, [pc, #28]	@ (80046a4 <vTaskPlaceOnEventList+0x48>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3318      	adds	r3, #24
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7fe fd33 	bl	80030f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004692:	2101      	movs	r1, #1
 8004694:	6838      	ldr	r0, [r7, #0]
 8004696:	f000 faa1 	bl	8004bdc <prvAddCurrentTaskToDelayedList>
}
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	200008ac 	.word	0x200008ac

080046a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	617b      	str	r3, [r7, #20]
}
 80046cc:	bf00      	nop
 80046ce:	bf00      	nop
 80046d0:	e7fd      	b.n	80046ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046d2:	4b0a      	ldr	r3, [pc, #40]	@ (80046fc <vTaskPlaceOnEventListRestricted+0x54>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3318      	adds	r3, #24
 80046d8:	4619      	mov	r1, r3
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7fe fce8 	bl	80030b0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	68b8      	ldr	r0, [r7, #8]
 80046f0:	f000 fa74 	bl	8004bdc <prvAddCurrentTaskToDelayedList>
	}
 80046f4:	bf00      	nop
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	200008ac 	.word	0x200008ac

08004700 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10b      	bne.n	800472e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	60fb      	str	r3, [r7, #12]
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	e7fd      	b.n	800472a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	3318      	adds	r3, #24
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fd19 	bl	800316a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004738:	4b1d      	ldr	r3, [pc, #116]	@ (80047b0 <xTaskRemoveFromEventList+0xb0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11c      	bne.n	800477a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	3304      	adds	r3, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fd10 	bl	800316a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	2201      	movs	r2, #1
 8004750:	409a      	lsls	r2, r3
 8004752:	4b18      	ldr	r3, [pc, #96]	@ (80047b4 <xTaskRemoveFromEventList+0xb4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4313      	orrs	r3, r2
 8004758:	4a16      	ldr	r2, [pc, #88]	@ (80047b4 <xTaskRemoveFromEventList+0xb4>)
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4a13      	ldr	r2, [pc, #76]	@ (80047b8 <xTaskRemoveFromEventList+0xb8>)
 800476a:	441a      	add	r2, r3
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	3304      	adds	r3, #4
 8004770:	4619      	mov	r1, r3
 8004772:	4610      	mov	r0, r2
 8004774:	f7fe fc9c 	bl	80030b0 <vListInsertEnd>
 8004778:	e005      	b.n	8004786 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	3318      	adds	r3, #24
 800477e:	4619      	mov	r1, r3
 8004780:	480e      	ldr	r0, [pc, #56]	@ (80047bc <xTaskRemoveFromEventList+0xbc>)
 8004782:	f7fe fc95 	bl	80030b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478a:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <xTaskRemoveFromEventList+0xc0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	429a      	cmp	r2, r3
 8004792:	d905      	bls.n	80047a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004794:	2301      	movs	r3, #1
 8004796:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004798:	4b0a      	ldr	r3, [pc, #40]	@ (80047c4 <xTaskRemoveFromEventList+0xc4>)
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e001      	b.n	80047a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047a4:	697b      	ldr	r3, [r7, #20]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	200009d4 	.word	0x200009d4
 80047b4:	200009b4 	.word	0x200009b4
 80047b8:	200008b0 	.word	0x200008b0
 80047bc:	2000096c 	.word	0x2000096c
 80047c0:	200008ac 	.word	0x200008ac
 80047c4:	200009c0 	.word	0x200009c0

080047c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047d0:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <vTaskInternalSetTimeOutState+0x24>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047d8:	4b05      	ldr	r3, [pc, #20]	@ (80047f0 <vTaskInternalSetTimeOutState+0x28>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	605a      	str	r2, [r3, #4]
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	200009c4 	.word	0x200009c4
 80047f0:	200009b0 	.word	0x200009b0

080047f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	613b      	str	r3, [r7, #16]
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	60fb      	str	r3, [r7, #12]
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	e7fd      	b.n	8004836 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800483a:	f000 fea5 	bl	8005588 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800483e:	4b1d      	ldr	r3, [pc, #116]	@ (80048b4 <xTaskCheckForTimeOut+0xc0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004856:	d102      	bne.n	800485e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004858:	2300      	movs	r3, #0
 800485a:	61fb      	str	r3, [r7, #28]
 800485c:	e023      	b.n	80048a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b15      	ldr	r3, [pc, #84]	@ (80048b8 <xTaskCheckForTimeOut+0xc4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d007      	beq.n	800487a <xTaskCheckForTimeOut+0x86>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	429a      	cmp	r2, r3
 8004872:	d302      	bcc.n	800487a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004874:	2301      	movs	r3, #1
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	e015      	b.n	80048a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	429a      	cmp	r2, r3
 8004882:	d20b      	bcs.n	800489c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	1ad2      	subs	r2, r2, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ff99 	bl	80047c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	e004      	b.n	80048a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048a2:	2301      	movs	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048a6:	f000 fea1 	bl	80055ec <vPortExitCritical>

	return xReturn;
 80048aa:	69fb      	ldr	r3, [r7, #28]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	200009b0 	.word	0x200009b0
 80048b8:	200009c4 	.word	0x200009c4

080048bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048c0:	4b03      	ldr	r3, [pc, #12]	@ (80048d0 <vTaskMissedYield+0x14>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
}
 80048c6:	bf00      	nop
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	200009c0 	.word	0x200009c0

080048d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048dc:	f000 f854 	bl	8004988 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048e0:	4b07      	ldr	r3, [pc, #28]	@ (8004900 <prvIdleTask+0x2c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d907      	bls.n	80048f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80048e8:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <prvIdleTask+0x30>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80048f8:	f7fb fefe 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80048fc:	e7ee      	b.n	80048dc <prvIdleTask+0x8>
 80048fe:	bf00      	nop
 8004900:	200008b0 	.word	0x200008b0
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800490e:	2300      	movs	r3, #0
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	e00c      	b.n	800492e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4a12      	ldr	r2, [pc, #72]	@ (8004968 <prvInitialiseTaskLists+0x60>)
 8004920:	4413      	add	r3, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe fb97 	bl	8003056 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3301      	adds	r3, #1
 800492c:	607b      	str	r3, [r7, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b06      	cmp	r3, #6
 8004932:	d9ef      	bls.n	8004914 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004934:	480d      	ldr	r0, [pc, #52]	@ (800496c <prvInitialiseTaskLists+0x64>)
 8004936:	f7fe fb8e 	bl	8003056 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800493a:	480d      	ldr	r0, [pc, #52]	@ (8004970 <prvInitialiseTaskLists+0x68>)
 800493c:	f7fe fb8b 	bl	8003056 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004940:	480c      	ldr	r0, [pc, #48]	@ (8004974 <prvInitialiseTaskLists+0x6c>)
 8004942:	f7fe fb88 	bl	8003056 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004946:	480c      	ldr	r0, [pc, #48]	@ (8004978 <prvInitialiseTaskLists+0x70>)
 8004948:	f7fe fb85 	bl	8003056 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800494c:	480b      	ldr	r0, [pc, #44]	@ (800497c <prvInitialiseTaskLists+0x74>)
 800494e:	f7fe fb82 	bl	8003056 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004952:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <prvInitialiseTaskLists+0x78>)
 8004954:	4a05      	ldr	r2, [pc, #20]	@ (800496c <prvInitialiseTaskLists+0x64>)
 8004956:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004958:	4b0a      	ldr	r3, [pc, #40]	@ (8004984 <prvInitialiseTaskLists+0x7c>)
 800495a:	4a05      	ldr	r2, [pc, #20]	@ (8004970 <prvInitialiseTaskLists+0x68>)
 800495c:	601a      	str	r2, [r3, #0]
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	200008b0 	.word	0x200008b0
 800496c:	2000093c 	.word	0x2000093c
 8004970:	20000950 	.word	0x20000950
 8004974:	2000096c 	.word	0x2000096c
 8004978:	20000980 	.word	0x20000980
 800497c:	20000998 	.word	0x20000998
 8004980:	20000964 	.word	0x20000964
 8004984:	20000968 	.word	0x20000968

08004988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800498e:	e019      	b.n	80049c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004990:	f000 fdfa 	bl	8005588 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004994:	4b10      	ldr	r3, [pc, #64]	@ (80049d8 <prvCheckTasksWaitingTermination+0x50>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3304      	adds	r3, #4
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe fbe2 	bl	800316a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049a6:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <prvCheckTasksWaitingTermination+0x54>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	4a0b      	ldr	r2, [pc, #44]	@ (80049dc <prvCheckTasksWaitingTermination+0x54>)
 80049ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049b0:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <prvCheckTasksWaitingTermination+0x58>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	4a0a      	ldr	r2, [pc, #40]	@ (80049e0 <prvCheckTasksWaitingTermination+0x58>)
 80049b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049ba:	f000 fe17 	bl	80055ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f810 	bl	80049e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049c4:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <prvCheckTasksWaitingTermination+0x58>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e1      	bne.n	8004990 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000980 	.word	0x20000980
 80049dc:	200009ac 	.word	0x200009ac
 80049e0:	20000994 	.word	0x20000994

080049e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	334c      	adds	r3, #76	@ 0x4c
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 f909 	bl	8005c08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d108      	bne.n	8004a12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 ffb5 	bl	8005974 <vPortFree>
				vPortFree( pxTCB );
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 ffb2 	bl	8005974 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a10:	e019      	b.n	8004a46 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d103      	bne.n	8004a24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 ffa9 	bl	8005974 <vPortFree>
	}
 8004a22:	e010      	b.n	8004a46 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d00b      	beq.n	8004a46 <prvDeleteTCB+0x62>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	60fb      	str	r3, [r7, #12]
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	e7fd      	b.n	8004a42 <prvDeleteTCB+0x5e>
	}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a56:	4b0c      	ldr	r3, [pc, #48]	@ (8004a88 <prvResetNextTaskUnblockTime+0x38>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a60:	4b0a      	ldr	r3, [pc, #40]	@ (8004a8c <prvResetNextTaskUnblockTime+0x3c>)
 8004a62:	f04f 32ff 	mov.w	r2, #4294967295
 8004a66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a68:	e008      	b.n	8004a7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a6a:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <prvResetNextTaskUnblockTime+0x38>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	4a04      	ldr	r2, [pc, #16]	@ (8004a8c <prvResetNextTaskUnblockTime+0x3c>)
 8004a7a:	6013      	str	r3, [r2, #0]
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	20000964 	.word	0x20000964
 8004a8c:	200009cc 	.word	0x200009cc

08004a90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <xTaskGetSchedulerState+0x34>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	e008      	b.n	8004ab6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aa4:	4b08      	ldr	r3, [pc, #32]	@ (8004ac8 <xTaskGetSchedulerState+0x38>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d102      	bne.n	8004ab2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004aac:	2302      	movs	r3, #2
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	e001      	b.n	8004ab6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ab6:	687b      	ldr	r3, [r7, #4]
	}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	200009b8 	.word	0x200009b8
 8004ac8:	200009d4 	.word	0x200009d4

08004acc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d070      	beq.n	8004bc4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd0 <xTaskPriorityDisinherit+0x104>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d00b      	beq.n	8004b04 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	60fb      	str	r3, [r7, #12]
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	e7fd      	b.n	8004b00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	60bb      	str	r3, [r7, #8]
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d044      	beq.n	8004bc4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d140      	bne.n	8004bc4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fb0f 	bl	800316a <uxListRemove>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d115      	bne.n	8004b7e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b56:	491f      	ldr	r1, [pc, #124]	@ (8004bd4 <xTaskPriorityDisinherit+0x108>)
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <xTaskPriorityDisinherit+0xb2>
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43da      	mvns	r2, r3
 8004b74:	4b18      	ldr	r3, [pc, #96]	@ (8004bd8 <xTaskPriorityDisinherit+0x10c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	4a17      	ldr	r2, [pc, #92]	@ (8004bd8 <xTaskPriorityDisinherit+0x10c>)
 8004b7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8a:	f1c3 0207 	rsb	r2, r3, #7
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	2201      	movs	r2, #1
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd8 <xTaskPriorityDisinherit+0x10c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8004bd8 <xTaskPriorityDisinherit+0x10c>)
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4a08      	ldr	r2, [pc, #32]	@ (8004bd4 <xTaskPriorityDisinherit+0x108>)
 8004bb2:	441a      	add	r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f7fe fa78 	bl	80030b0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bc4:	697b      	ldr	r3, [r7, #20]
	}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	200008ac 	.word	0x200008ac
 8004bd4:	200008b0 	.word	0x200008b0
 8004bd8:	200009b4 	.word	0x200009b4

08004bdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004be6:	4b29      	ldr	r3, [pc, #164]	@ (8004c8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bec:	4b28      	ldr	r3, [pc, #160]	@ (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe fab9 	bl	800316a <uxListRemove>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004bfe:	4b24      	ldr	r3, [pc, #144]	@ (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	2201      	movs	r2, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43da      	mvns	r2, r3
 8004c0c:	4b21      	ldr	r3, [pc, #132]	@ (8004c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4013      	ands	r3, r2
 8004c12:	4a20      	ldr	r2, [pc, #128]	@ (8004c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d10a      	bne.n	8004c34 <prvAddCurrentTaskToDelayedList+0x58>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c24:	4b1a      	ldr	r3, [pc, #104]	@ (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	481a      	ldr	r0, [pc, #104]	@ (8004c98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c2e:	f7fe fa3f 	bl	80030b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c32:	e026      	b.n	8004c82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4413      	add	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c3c:	4b14      	ldr	r3, [pc, #80]	@ (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d209      	bcs.n	8004c60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c4c:	4b13      	ldr	r3, [pc, #76]	@ (8004c9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b0f      	ldr	r3, [pc, #60]	@ (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f7fe fa4d 	bl	80030f8 <vListInsert>
}
 8004c5e:	e010      	b.n	8004c82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c60:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b0a      	ldr	r3, [pc, #40]	@ (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f7fe fa43 	bl	80030f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c72:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d202      	bcs.n	8004c82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c7c:	4a09      	ldr	r2, [pc, #36]	@ (8004ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	6013      	str	r3, [r2, #0]
}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	200009b0 	.word	0x200009b0
 8004c90:	200008ac 	.word	0x200008ac
 8004c94:	200009b4 	.word	0x200009b4
 8004c98:	20000998 	.word	0x20000998
 8004c9c:	20000968 	.word	0x20000968
 8004ca0:	20000964 	.word	0x20000964
 8004ca4:	200009cc 	.word	0x200009cc

08004ca8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	@ 0x28
 8004cac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cb2:	f000 faf9 	bl	80052a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d2c <xTimerCreateTimerTask+0x84>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d021      	beq.n	8004d02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004cc6:	1d3a      	adds	r2, r7, #4
 8004cc8:	f107 0108 	add.w	r1, r7, #8
 8004ccc:	f107 030c 	add.w	r3, r7, #12
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fb fd47 	bl	8000764 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	9202      	str	r2, [sp, #8]
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	460a      	mov	r2, r1
 8004ce8:	4911      	ldr	r1, [pc, #68]	@ (8004d30 <xTimerCreateTimerTask+0x88>)
 8004cea:	4812      	ldr	r0, [pc, #72]	@ (8004d34 <xTimerCreateTimerTask+0x8c>)
 8004cec:	f7ff f87e 	bl	8003dec <xTaskCreateStatic>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	4a11      	ldr	r2, [pc, #68]	@ (8004d38 <xTimerCreateTimerTask+0x90>)
 8004cf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004cf6:	4b10      	ldr	r3, [pc, #64]	@ (8004d38 <xTimerCreateTimerTask+0x90>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	613b      	str	r3, [r7, #16]
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d20:	697b      	ldr	r3, [r7, #20]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000a08 	.word	0x20000a08
 8004d30:	08006634 	.word	0x08006634
 8004d34:	08004e75 	.word	0x08004e75
 8004d38:	20000a0c 	.word	0x20000a0c

08004d3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	@ 0x28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10b      	bne.n	8004d6c <xTimerGenericCommand+0x30>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	623b      	str	r3, [r7, #32]
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	e7fd      	b.n	8004d68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d6c:	4b19      	ldr	r3, [pc, #100]	@ (8004dd4 <xTimerGenericCommand+0x98>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d02a      	beq.n	8004dca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b05      	cmp	r3, #5
 8004d84:	dc18      	bgt.n	8004db8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d86:	f7ff fe83 	bl	8004a90 <xTaskGetSchedulerState>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d109      	bne.n	8004da4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d90:	4b10      	ldr	r3, [pc, #64]	@ (8004dd4 <xTimerGenericCommand+0x98>)
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	f107 0114 	add.w	r1, r7, #20
 8004d98:	2300      	movs	r3, #0
 8004d9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d9c:	f7fe fb52 	bl	8003444 <xQueueGenericSend>
 8004da0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004da2:	e012      	b.n	8004dca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004da4:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <xTimerGenericCommand+0x98>)
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	f107 0114 	add.w	r1, r7, #20
 8004dac:	2300      	movs	r3, #0
 8004dae:	2200      	movs	r2, #0
 8004db0:	f7fe fb48 	bl	8003444 <xQueueGenericSend>
 8004db4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004db6:	e008      	b.n	8004dca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004db8:	4b06      	ldr	r3, [pc, #24]	@ (8004dd4 <xTimerGenericCommand+0x98>)
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	f107 0114 	add.w	r1, r7, #20
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	f7fe fc40 	bl	8003648 <xQueueGenericSendFromISR>
 8004dc8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3728      	adds	r7, #40	@ 0x28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000a08 	.word	0x20000a08

08004dd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de2:	4b23      	ldr	r3, [pc, #140]	@ (8004e70 <prvProcessExpiredTimer+0x98>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fe f9ba 	bl	800316a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d023      	beq.n	8004e4c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	18d1      	adds	r1, r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	6978      	ldr	r0, [r7, #20]
 8004e12:	f000 f8d7 	bl	8004fc4 <prvInsertTimerInActiveList>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d020      	beq.n	8004e5e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	2300      	movs	r3, #0
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	2100      	movs	r1, #0
 8004e26:	6978      	ldr	r0, [r7, #20]
 8004e28:	f7ff ff88 	bl	8004d3c <xTimerGenericCommand>
 8004e2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d114      	bne.n	8004e5e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60fb      	str	r3, [r7, #12]
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	e7fd      	b.n	8004e48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	6978      	ldr	r0, [r7, #20]
 8004e64:	4798      	blx	r3
}
 8004e66:	bf00      	nop
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000a00 	.word	0x20000a00

08004e74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8004e7c:	f7fb fc51 	bl	8000722 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e80:	f107 0308 	add.w	r3, r7, #8
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 f859 	bl	8004f3c <prvGetNextExpireTime>
 8004e8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f805 	bl	8004ea0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e96:	f000 f8d7 	bl	8005048 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e9a:	bf00      	nop
 8004e9c:	e7f0      	b.n	8004e80 <prvTimerTask+0xc>
	...

08004ea0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004eaa:	f7ff f9f5 	bl	8004298 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 f866 	bl	8004f84 <prvSampleTimeNow>
 8004eb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d130      	bne.n	8004f22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <prvProcessTimerOrBlockTask+0x3c>
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d806      	bhi.n	8004edc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ece:	f7ff f9f1 	bl	80042b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ed2:	68f9      	ldr	r1, [r7, #12]
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ff7f 	bl	8004dd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004eda:	e024      	b.n	8004f26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d008      	beq.n	8004ef4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ee2:	4b13      	ldr	r3, [pc, #76]	@ (8004f30 <prvProcessTimerOrBlockTask+0x90>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <prvProcessTimerOrBlockTask+0x50>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <prvProcessTimerOrBlockTask+0x52>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f34 <prvProcessTimerOrBlockTask+0x94>)
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	4619      	mov	r1, r3
 8004f02:	f7fe ff3f 	bl	8003d84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f06:	f7ff f9d5 	bl	80042b4 <xTaskResumeAll>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f10:	4b09      	ldr	r3, [pc, #36]	@ (8004f38 <prvProcessTimerOrBlockTask+0x98>)
 8004f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	f3bf 8f6f 	isb	sy
}
 8004f20:	e001      	b.n	8004f26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f22:	f7ff f9c7 	bl	80042b4 <xTaskResumeAll>
}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000a04 	.word	0x20000a04
 8004f34:	20000a08 	.word	0x20000a08
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f44:	4b0e      	ldr	r3, [pc, #56]	@ (8004f80 <prvGetNextExpireTime+0x44>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <prvGetNextExpireTime+0x16>
 8004f4e:	2201      	movs	r2, #1
 8004f50:	e000      	b.n	8004f54 <prvGetNextExpireTime+0x18>
 8004f52:	2200      	movs	r2, #0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d105      	bne.n	8004f6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f60:	4b07      	ldr	r3, [pc, #28]	@ (8004f80 <prvGetNextExpireTime+0x44>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	e001      	b.n	8004f70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000a00 	.word	0x20000a00

08004f84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f8c:	f7ff fa30 	bl	80043f0 <xTaskGetTickCount>
 8004f90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f92:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc0 <prvSampleTimeNow+0x3c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d205      	bcs.n	8004fa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f9c:	f000 f91e 	bl	80051dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e002      	b.n	8004fae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004fae:	4a04      	ldr	r2, [pc, #16]	@ (8004fc0 <prvSampleTimeNow+0x3c>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000a10 	.word	0x20000a10

08004fc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d812      	bhi.n	8005010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e01b      	b.n	8005036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ffe:	4b10      	ldr	r3, [pc, #64]	@ (8005040 <prvInsertTimerInActiveList+0x7c>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3304      	adds	r3, #4
 8005006:	4619      	mov	r1, r3
 8005008:	4610      	mov	r0, r2
 800500a:	f7fe f875 	bl	80030f8 <vListInsert>
 800500e:	e012      	b.n	8005036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d206      	bcs.n	8005026 <prvInsertTimerInActiveList+0x62>
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d302      	bcc.n	8005026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005020:	2301      	movs	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e007      	b.n	8005036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005026:	4b07      	ldr	r3, [pc, #28]	@ (8005044 <prvInsertTimerInActiveList+0x80>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3304      	adds	r3, #4
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f7fe f861 	bl	80030f8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005036:	697b      	ldr	r3, [r7, #20]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20000a04 	.word	0x20000a04
 8005044:	20000a00 	.word	0x20000a00

08005048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08c      	sub	sp, #48	@ 0x30
 800504c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800504e:	e0b2      	b.n	80051b6 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f2c0 80af 	blt.w	80051b6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	3304      	adds	r3, #4
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe f87e 	bl	800316a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800506e:	1d3b      	adds	r3, r7, #4
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff ff87 	bl	8004f84 <prvSampleTimeNow>
 8005076:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b09      	cmp	r3, #9
 800507c:	f200 8098 	bhi.w	80051b0 <prvProcessReceivedCommands+0x168>
 8005080:	a201      	add	r2, pc, #4	@ (adr r2, 8005088 <prvProcessReceivedCommands+0x40>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	080050b1 	.word	0x080050b1
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050b1 	.word	0x080050b1
 8005094:	08005127 	.word	0x08005127
 8005098:	0800513b 	.word	0x0800513b
 800509c:	08005187 	.word	0x08005187
 80050a0:	080050b1 	.word	0x080050b1
 80050a4:	080050b1 	.word	0x080050b1
 80050a8:	08005127 	.word	0x08005127
 80050ac:	0800513b 	.word	0x0800513b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	18d1      	adds	r1, r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a3a      	ldr	r2, [r7, #32]
 80050ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050d0:	f7ff ff78 	bl	8004fc4 <prvInsertTimerInActiveList>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d06c      	beq.n	80051b4 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d061      	beq.n	80051b4 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	441a      	add	r2, r3
 80050f8:	2300      	movs	r3, #0
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	2300      	movs	r3, #0
 80050fe:	2100      	movs	r1, #0
 8005100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005102:	f7ff fe1b 	bl	8004d3c <xTimerGenericCommand>
 8005106:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d152      	bne.n	80051b4 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	61bb      	str	r3, [r7, #24]
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	e7fd      	b.n	8005122 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800512c:	f023 0301 	bic.w	r3, r3, #1
 8005130:	b2da      	uxtb	r2, r3
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005138:	e03d      	b.n	80051b6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	b2da      	uxtb	r2, r3
 8005146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10b      	bne.n	8005172 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	617b      	str	r3, [r7, #20]
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	e7fd      	b.n	800516e <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	18d1      	adds	r1, r2, r3
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	6a3a      	ldr	r2, [r7, #32]
 800517e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005180:	f7ff ff20 	bl	8004fc4 <prvInsertTimerInActiveList>
					break;
 8005184:	e017      	b.n	80051b6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8005194:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005196:	f000 fbed 	bl	8005974 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800519a:	e00c      	b.n	80051b6 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80051ae:	e002      	b.n	80051b6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80051b0:	bf00      	nop
 80051b2:	e000      	b.n	80051b6 <prvProcessReceivedCommands+0x16e>
					break;
 80051b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051b6:	4b08      	ldr	r3, [pc, #32]	@ (80051d8 <prvProcessReceivedCommands+0x190>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f107 0108 	add.w	r1, r7, #8
 80051be:	2200      	movs	r2, #0
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe fadf 	bl	8003784 <xQueueReceive>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f47f af41 	bne.w	8005050 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80051ce:	bf00      	nop
 80051d0:	bf00      	nop
 80051d2:	3728      	adds	r7, #40	@ 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20000a08 	.word	0x20000a08

080051dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051e2:	e049      	b.n	8005278 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051e4:	4b2e      	ldr	r3, [pc, #184]	@ (80052a0 <prvSwitchTimerLists+0xc4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ee:	4b2c      	ldr	r3, [pc, #176]	@ (80052a0 <prvSwitchTimerLists+0xc4>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3304      	adds	r3, #4
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fd ffb4 	bl	800316a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02f      	beq.n	8005278 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4413      	add	r3, r2
 8005220:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	429a      	cmp	r2, r3
 8005228:	d90e      	bls.n	8005248 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005236:	4b1a      	ldr	r3, [pc, #104]	@ (80052a0 <prvSwitchTimerLists+0xc4>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3304      	adds	r3, #4
 800523e:	4619      	mov	r1, r3
 8005240:	4610      	mov	r0, r2
 8005242:	f7fd ff59 	bl	80030f8 <vListInsert>
 8005246:	e017      	b.n	8005278 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005248:	2300      	movs	r3, #0
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	2300      	movs	r3, #0
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	2100      	movs	r1, #0
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f7ff fd72 	bl	8004d3c <xTimerGenericCommand>
 8005258:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10b      	bne.n	8005278 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	603b      	str	r3, [r7, #0]
}
 8005272:	bf00      	nop
 8005274:	bf00      	nop
 8005276:	e7fd      	b.n	8005274 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005278:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <prvSwitchTimerLists+0xc4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1b0      	bne.n	80051e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005282:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <prvSwitchTimerLists+0xc4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005288:	4b06      	ldr	r3, [pc, #24]	@ (80052a4 <prvSwitchTimerLists+0xc8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a04      	ldr	r2, [pc, #16]	@ (80052a0 <prvSwitchTimerLists+0xc4>)
 800528e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005290:	4a04      	ldr	r2, [pc, #16]	@ (80052a4 <prvSwitchTimerLists+0xc8>)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	6013      	str	r3, [r2, #0]
}
 8005296:	bf00      	nop
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000a00 	.word	0x20000a00
 80052a4:	20000a04 	.word	0x20000a04

080052a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052ae:	f000 f96b 	bl	8005588 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80052b2:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <prvCheckForValidListAndQueue+0x60>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d120      	bne.n	80052fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80052ba:	4814      	ldr	r0, [pc, #80]	@ (800530c <prvCheckForValidListAndQueue+0x64>)
 80052bc:	f7fd fecb 	bl	8003056 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80052c0:	4813      	ldr	r0, [pc, #76]	@ (8005310 <prvCheckForValidListAndQueue+0x68>)
 80052c2:	f7fd fec8 	bl	8003056 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80052c6:	4b13      	ldr	r3, [pc, #76]	@ (8005314 <prvCheckForValidListAndQueue+0x6c>)
 80052c8:	4a10      	ldr	r2, [pc, #64]	@ (800530c <prvCheckForValidListAndQueue+0x64>)
 80052ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80052cc:	4b12      	ldr	r3, [pc, #72]	@ (8005318 <prvCheckForValidListAndQueue+0x70>)
 80052ce:	4a10      	ldr	r2, [pc, #64]	@ (8005310 <prvCheckForValidListAndQueue+0x68>)
 80052d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80052d2:	2300      	movs	r3, #0
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	4b11      	ldr	r3, [pc, #68]	@ (800531c <prvCheckForValidListAndQueue+0x74>)
 80052d8:	4a11      	ldr	r2, [pc, #68]	@ (8005320 <prvCheckForValidListAndQueue+0x78>)
 80052da:	210c      	movs	r1, #12
 80052dc:	200a      	movs	r0, #10
 80052de:	f7fd ffd9 	bl	8003294 <xQueueGenericCreateStatic>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4a08      	ldr	r2, [pc, #32]	@ (8005308 <prvCheckForValidListAndQueue+0x60>)
 80052e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052e8:	4b07      	ldr	r3, [pc, #28]	@ (8005308 <prvCheckForValidListAndQueue+0x60>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <prvCheckForValidListAndQueue+0x60>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	490b      	ldr	r1, [pc, #44]	@ (8005324 <prvCheckForValidListAndQueue+0x7c>)
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe fd1a 	bl	8003d30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052fc:	f000 f976 	bl	80055ec <vPortExitCritical>
}
 8005300:	bf00      	nop
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000a08 	.word	0x20000a08
 800530c:	200009d8 	.word	0x200009d8
 8005310:	200009ec 	.word	0x200009ec
 8005314:	20000a00 	.word	0x20000a00
 8005318:	20000a04 	.word	0x20000a04
 800531c:	20000a8c 	.word	0x20000a8c
 8005320:	20000a14 	.word	0x20000a14
 8005324:	0800663c 	.word	0x0800663c

08005328 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3b04      	subs	r3, #4
 8005338:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b04      	subs	r3, #4
 8005346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f023 0201 	bic.w	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3b04      	subs	r3, #4
 8005356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005358:	4a0c      	ldr	r2, [pc, #48]	@ (800538c <pxPortInitialiseStack+0x64>)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3b14      	subs	r3, #20
 8005362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3b04      	subs	r3, #4
 800536e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f06f 0202 	mvn.w	r2, #2
 8005376:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3b20      	subs	r3, #32
 800537c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800537e:	68fb      	ldr	r3, [r7, #12]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	08005391 	.word	0x08005391

08005390 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800539a:	4b13      	ldr	r3, [pc, #76]	@ (80053e8 <prvTaskExitError+0x58>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a2:	d00b      	beq.n	80053bc <prvTaskExitError+0x2c>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	60fb      	str	r3, [r7, #12]
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <prvTaskExitError+0x28>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	60bb      	str	r3, [r7, #8]
}
 80053ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053d0:	bf00      	nop
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0fc      	beq.n	80053d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	2000000c 	.word	0x2000000c
 80053ec:	00000000 	.word	0x00000000

080053f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053f0:	4b07      	ldr	r3, [pc, #28]	@ (8005410 <pxCurrentTCBConst2>)
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	6808      	ldr	r0, [r1, #0]
 80053f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fa:	f380 8809 	msr	PSP, r0
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f380 8811 	msr	BASEPRI, r0
 800540a:	4770      	bx	lr
 800540c:	f3af 8000 	nop.w

08005410 <pxCurrentTCBConst2>:
 8005410:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop

08005418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005418:	4808      	ldr	r0, [pc, #32]	@ (800543c <prvPortStartFirstTask+0x24>)
 800541a:	6800      	ldr	r0, [r0, #0]
 800541c:	6800      	ldr	r0, [r0, #0]
 800541e:	f380 8808 	msr	MSP, r0
 8005422:	f04f 0000 	mov.w	r0, #0
 8005426:	f380 8814 	msr	CONTROL, r0
 800542a:	b662      	cpsie	i
 800542c:	b661      	cpsie	f
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	df00      	svc	0
 8005438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800543a:	bf00      	nop
 800543c:	e000ed08 	.word	0xe000ed08

08005440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005446:	4b47      	ldr	r3, [pc, #284]	@ (8005564 <xPortStartScheduler+0x124>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a47      	ldr	r2, [pc, #284]	@ (8005568 <xPortStartScheduler+0x128>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10b      	bne.n	8005468 <xPortStartScheduler+0x28>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	60fb      	str	r3, [r7, #12]
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005468:	4b3e      	ldr	r3, [pc, #248]	@ (8005564 <xPortStartScheduler+0x124>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a3f      	ldr	r2, [pc, #252]	@ (800556c <xPortStartScheduler+0x12c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10b      	bne.n	800548a <xPortStartScheduler+0x4a>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	613b      	str	r3, [r7, #16]
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800548a:	4b39      	ldr	r3, [pc, #228]	@ (8005570 <xPortStartScheduler+0x130>)
 800548c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	22ff      	movs	r2, #255	@ 0xff
 800549a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	4b31      	ldr	r3, [pc, #196]	@ (8005574 <xPortStartScheduler+0x134>)
 80054b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054b2:	4b31      	ldr	r3, [pc, #196]	@ (8005578 <xPortStartScheduler+0x138>)
 80054b4:	2207      	movs	r2, #7
 80054b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054b8:	e009      	b.n	80054ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80054ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005578 <xPortStartScheduler+0x138>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3b01      	subs	r3, #1
 80054c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005578 <xPortStartScheduler+0x138>)
 80054c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d6:	2b80      	cmp	r3, #128	@ 0x80
 80054d8:	d0ef      	beq.n	80054ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054da:	4b27      	ldr	r3, [pc, #156]	@ (8005578 <xPortStartScheduler+0x138>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f1c3 0307 	rsb	r3, r3, #7
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d00b      	beq.n	80054fe <xPortStartScheduler+0xbe>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	60bb      	str	r3, [r7, #8]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005578 <xPortStartScheduler+0x138>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	4a1c      	ldr	r2, [pc, #112]	@ (8005578 <xPortStartScheduler+0x138>)
 8005506:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005508:	4b1b      	ldr	r3, [pc, #108]	@ (8005578 <xPortStartScheduler+0x138>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005510:	4a19      	ldr	r2, [pc, #100]	@ (8005578 <xPortStartScheduler+0x138>)
 8005512:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	b2da      	uxtb	r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800551c:	4b17      	ldr	r3, [pc, #92]	@ (800557c <xPortStartScheduler+0x13c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a16      	ldr	r2, [pc, #88]	@ (800557c <xPortStartScheduler+0x13c>)
 8005522:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005526:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005528:	4b14      	ldr	r3, [pc, #80]	@ (800557c <xPortStartScheduler+0x13c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a13      	ldr	r2, [pc, #76]	@ (800557c <xPortStartScheduler+0x13c>)
 800552e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005532:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005534:	f000 f8da 	bl	80056ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005538:	4b11      	ldr	r3, [pc, #68]	@ (8005580 <xPortStartScheduler+0x140>)
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800553e:	f000 f8f9 	bl	8005734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005542:	4b10      	ldr	r3, [pc, #64]	@ (8005584 <xPortStartScheduler+0x144>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a0f      	ldr	r2, [pc, #60]	@ (8005584 <xPortStartScheduler+0x144>)
 8005548:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800554c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800554e:	f7ff ff63 	bl	8005418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005552:	f7ff f81f 	bl	8004594 <vTaskSwitchContext>
	prvTaskExitError();
 8005556:	f7ff ff1b 	bl	8005390 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	e000ed00 	.word	0xe000ed00
 8005568:	410fc271 	.word	0x410fc271
 800556c:	410fc270 	.word	0x410fc270
 8005570:	e000e400 	.word	0xe000e400
 8005574:	20000ad4 	.word	0x20000ad4
 8005578:	20000ad8 	.word	0x20000ad8
 800557c:	e000ed20 	.word	0xe000ed20
 8005580:	2000000c 	.word	0x2000000c
 8005584:	e000ef34 	.word	0xe000ef34

08005588 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
}
 80055a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055a2:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <vPortEnterCritical+0x5c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3301      	adds	r3, #1
 80055a8:	4a0e      	ldr	r2, [pc, #56]	@ (80055e4 <vPortEnterCritical+0x5c>)
 80055aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055ac:	4b0d      	ldr	r3, [pc, #52]	@ (80055e4 <vPortEnterCritical+0x5c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d110      	bne.n	80055d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055b4:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <vPortEnterCritical+0x60>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	603b      	str	r3, [r7, #0]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <vPortEnterCritical+0x4a>
	}
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	2000000c 	.word	0x2000000c
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055f2:	4b12      	ldr	r3, [pc, #72]	@ (800563c <vPortExitCritical+0x50>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <vPortExitCritical+0x26>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	607b      	str	r3, [r7, #4]
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	e7fd      	b.n	800560e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005612:	4b0a      	ldr	r3, [pc, #40]	@ (800563c <vPortExitCritical+0x50>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3b01      	subs	r3, #1
 8005618:	4a08      	ldr	r2, [pc, #32]	@ (800563c <vPortExitCritical+0x50>)
 800561a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800561c:	4b07      	ldr	r3, [pc, #28]	@ (800563c <vPortExitCritical+0x50>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <vPortExitCritical+0x44>
 8005624:	2300      	movs	r3, #0
 8005626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f383 8811 	msr	BASEPRI, r3
}
 800562e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	2000000c 	.word	0x2000000c

08005640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005640:	f3ef 8009 	mrs	r0, PSP
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	4b15      	ldr	r3, [pc, #84]	@ (80056a0 <pxCurrentTCBConst>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	f01e 0f10 	tst.w	lr, #16
 8005650:	bf08      	it	eq
 8005652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565a:	6010      	str	r0, [r2, #0]
 800565c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005664:	f380 8811 	msr	BASEPRI, r0
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f7fe ff90 	bl	8004594 <vTaskSwitchContext>
 8005674:	f04f 0000 	mov.w	r0, #0
 8005678:	f380 8811 	msr	BASEPRI, r0
 800567c:	bc09      	pop	{r0, r3}
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	6808      	ldr	r0, [r1, #0]
 8005682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005686:	f01e 0f10 	tst.w	lr, #16
 800568a:	bf08      	it	eq
 800568c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005690:	f380 8809 	msr	PSP, r0
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	f3af 8000 	nop.w

080056a0 <pxCurrentTCBConst>:
 80056a0:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop

080056a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	607b      	str	r3, [r7, #4]
}
 80056c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056c2:	f7fe fea5 	bl	8004410 <xTaskIncrementTick>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056cc:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <xPortSysTickHandler+0x40>)
 80056ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	2300      	movs	r3, #0
 80056d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	f383 8811 	msr	BASEPRI, r3
}
 80056de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <vPortSetupTimerInterrupt+0x34>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <vPortSetupTimerInterrupt+0x38>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <vPortSetupTimerInterrupt+0x3c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a0a      	ldr	r2, [pc, #40]	@ (800572c <vPortSetupTimerInterrupt+0x40>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	099b      	lsrs	r3, r3, #6
 8005708:	4a09      	ldr	r2, [pc, #36]	@ (8005730 <vPortSetupTimerInterrupt+0x44>)
 800570a:	3b01      	subs	r3, #1
 800570c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800570e:	4b04      	ldr	r3, [pc, #16]	@ (8005720 <vPortSetupTimerInterrupt+0x34>)
 8005710:	2207      	movs	r2, #7
 8005712:	601a      	str	r2, [r3, #0]
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	e000e010 	.word	0xe000e010
 8005724:	e000e018 	.word	0xe000e018
 8005728:	20000000 	.word	0x20000000
 800572c:	10624dd3 	.word	0x10624dd3
 8005730:	e000e014 	.word	0xe000e014

08005734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005734:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005744 <vPortEnableVFP+0x10>
 8005738:	6801      	ldr	r1, [r0, #0]
 800573a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800573e:	6001      	str	r1, [r0, #0]
 8005740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005742:	bf00      	nop
 8005744:	e000ed88 	.word	0xe000ed88

08005748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800574e:	f3ef 8305 	mrs	r3, IPSR
 8005752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b0f      	cmp	r3, #15
 8005758:	d915      	bls.n	8005786 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800575a:	4a18      	ldr	r2, [pc, #96]	@ (80057bc <vPortValidateInterruptPriority+0x74>)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005764:	4b16      	ldr	r3, [pc, #88]	@ (80057c0 <vPortValidateInterruptPriority+0x78>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	7afa      	ldrb	r2, [r7, #11]
 800576a:	429a      	cmp	r2, r3
 800576c:	d20b      	bcs.n	8005786 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	607b      	str	r3, [r7, #4]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005786:	4b0f      	ldr	r3, [pc, #60]	@ (80057c4 <vPortValidateInterruptPriority+0x7c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800578e:	4b0e      	ldr	r3, [pc, #56]	@ (80057c8 <vPortValidateInterruptPriority+0x80>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d90b      	bls.n	80057ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	603b      	str	r3, [r7, #0]
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	e7fd      	b.n	80057aa <vPortValidateInterruptPriority+0x62>
	}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	e000e3f0 	.word	0xe000e3f0
 80057c0:	20000ad4 	.word	0x20000ad4
 80057c4:	e000ed0c 	.word	0xe000ed0c
 80057c8:	20000ad8 	.word	0x20000ad8

080057cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08a      	sub	sp, #40	@ 0x28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057d8:	f7fe fd5e 	bl	8004298 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057dc:	4b5f      	ldr	r3, [pc, #380]	@ (800595c <pvPortMalloc+0x190>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057e4:	f000 f92a 	bl	8005a3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057e8:	4b5d      	ldr	r3, [pc, #372]	@ (8005960 <pvPortMalloc+0x194>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f040 8095 	bne.w	8005920 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01e      	beq.n	800583a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80057fc:	2208      	movs	r2, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4413      	add	r3, r2
 8005802:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	2b00      	cmp	r3, #0
 800580c:	d015      	beq.n	800583a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f023 0307 	bic.w	r3, r3, #7
 8005814:	3308      	adds	r3, #8
 8005816:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <pvPortMalloc+0x6e>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	617b      	str	r3, [r7, #20]
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	e7fd      	b.n	8005836 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d06f      	beq.n	8005920 <pvPortMalloc+0x154>
 8005840:	4b48      	ldr	r3, [pc, #288]	@ (8005964 <pvPortMalloc+0x198>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	429a      	cmp	r2, r3
 8005848:	d86a      	bhi.n	8005920 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800584a:	4b47      	ldr	r3, [pc, #284]	@ (8005968 <pvPortMalloc+0x19c>)
 800584c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800584e:	4b46      	ldr	r3, [pc, #280]	@ (8005968 <pvPortMalloc+0x19c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005854:	e004      	b.n	8005860 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d903      	bls.n	8005872 <pvPortMalloc+0xa6>
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f1      	bne.n	8005856 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005872:	4b3a      	ldr	r3, [pc, #232]	@ (800595c <pvPortMalloc+0x190>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005878:	429a      	cmp	r2, r3
 800587a:	d051      	beq.n	8005920 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2208      	movs	r2, #8
 8005882:	4413      	add	r3, r2
 8005884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	1ad2      	subs	r2, r2, r3
 8005896:	2308      	movs	r3, #8
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	429a      	cmp	r2, r3
 800589c:	d920      	bls.n	80058e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800589e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4413      	add	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <pvPortMalloc+0xfc>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	613b      	str	r3, [r7, #16]
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	e7fd      	b.n	80058c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	1ad2      	subs	r2, r2, r3
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058da:	69b8      	ldr	r0, [r7, #24]
 80058dc:	f000 f910 	bl	8005b00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058e0:	4b20      	ldr	r3, [pc, #128]	@ (8005964 <pvPortMalloc+0x198>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005964 <pvPortMalloc+0x198>)
 80058ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005964 <pvPortMalloc+0x198>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	4b1e      	ldr	r3, [pc, #120]	@ (800596c <pvPortMalloc+0x1a0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d203      	bcs.n	8005902 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005964 <pvPortMalloc+0x198>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1b      	ldr	r2, [pc, #108]	@ (800596c <pvPortMalloc+0x1a0>)
 8005900:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	4b16      	ldr	r3, [pc, #88]	@ (8005960 <pvPortMalloc+0x194>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	431a      	orrs	r2, r3
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005916:	4b16      	ldr	r3, [pc, #88]	@ (8005970 <pvPortMalloc+0x1a4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	4a14      	ldr	r2, [pc, #80]	@ (8005970 <pvPortMalloc+0x1a4>)
 800591e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005920:	f7fe fcc8 	bl	80042b4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800592a:	f7fa fef3 	bl	8000714 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00b      	beq.n	8005950 <pvPortMalloc+0x184>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60fb      	str	r3, [r7, #12]
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <pvPortMalloc+0x180>
	return pvReturn;
 8005950:	69fb      	ldr	r3, [r7, #28]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3728      	adds	r7, #40	@ 0x28
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	200046e4 	.word	0x200046e4
 8005960:	200046f8 	.word	0x200046f8
 8005964:	200046e8 	.word	0x200046e8
 8005968:	200046dc 	.word	0x200046dc
 800596c:	200046ec 	.word	0x200046ec
 8005970:	200046f0 	.word	0x200046f0

08005974 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d04f      	beq.n	8005a26 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005986:	2308      	movs	r3, #8
 8005988:	425b      	negs	r3, r3
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4413      	add	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	4b25      	ldr	r3, [pc, #148]	@ (8005a30 <vPortFree+0xbc>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4013      	ands	r3, r2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <vPortFree+0x46>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	60fb      	str	r3, [r7, #12]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <vPortFree+0x66>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	60bb      	str	r3, [r7, #8]
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	e7fd      	b.n	80059d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	4b14      	ldr	r3, [pc, #80]	@ (8005a30 <vPortFree+0xbc>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01e      	beq.n	8005a26 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d11a      	bne.n	8005a26 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a30 <vPortFree+0xbc>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	43db      	mvns	r3, r3
 80059fa:	401a      	ands	r2, r3
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a00:	f7fe fc4a 	bl	8004298 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <vPortFree+0xc0>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	4a09      	ldr	r2, [pc, #36]	@ (8005a34 <vPortFree+0xc0>)
 8005a10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a12:	6938      	ldr	r0, [r7, #16]
 8005a14:	f000 f874 	bl	8005b00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a18:	4b07      	ldr	r3, [pc, #28]	@ (8005a38 <vPortFree+0xc4>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	4a06      	ldr	r2, [pc, #24]	@ (8005a38 <vPortFree+0xc4>)
 8005a20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a22:	f7fe fc47 	bl	80042b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a26:	bf00      	nop
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	200046f8 	.word	0x200046f8
 8005a34:	200046e8 	.word	0x200046e8
 8005a38:	200046f4 	.word	0x200046f4

08005a3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a42:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005a46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a48:	4b27      	ldr	r3, [pc, #156]	@ (8005ae8 <prvHeapInit+0xac>)
 8005a4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00c      	beq.n	8005a70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3307      	adds	r3, #7
 8005a5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0307 	bic.w	r3, r3, #7
 8005a62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae8 <prvHeapInit+0xac>)
 8005a6c:	4413      	add	r3, r2
 8005a6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a74:	4a1d      	ldr	r2, [pc, #116]	@ (8005aec <prvHeapInit+0xb0>)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005aec <prvHeapInit+0xb0>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	4413      	add	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a88:	2208      	movs	r2, #8
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0307 	bic.w	r3, r3, #7
 8005a96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4a15      	ldr	r2, [pc, #84]	@ (8005af0 <prvHeapInit+0xb4>)
 8005a9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a9e:	4b14      	ldr	r3, [pc, #80]	@ (8005af0 <prvHeapInit+0xb4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005aa6:	4b12      	ldr	r3, [pc, #72]	@ (8005af0 <prvHeapInit+0xb4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	1ad2      	subs	r2, r2, r3
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005abc:	4b0c      	ldr	r3, [pc, #48]	@ (8005af0 <prvHeapInit+0xb4>)
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8005af4 <prvHeapInit+0xb8>)
 8005aca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4a09      	ldr	r2, [pc, #36]	@ (8005af8 <prvHeapInit+0xbc>)
 8005ad2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ad4:	4b09      	ldr	r3, [pc, #36]	@ (8005afc <prvHeapInit+0xc0>)
 8005ad6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005ada:	601a      	str	r2, [r3, #0]
}
 8005adc:	bf00      	nop
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	20000adc 	.word	0x20000adc
 8005aec:	200046dc 	.word	0x200046dc
 8005af0:	200046e4 	.word	0x200046e4
 8005af4:	200046ec 	.word	0x200046ec
 8005af8:	200046e8 	.word	0x200046e8
 8005afc:	200046f8 	.word	0x200046f8

08005b00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b08:	4b28      	ldr	r3, [pc, #160]	@ (8005bac <prvInsertBlockIntoFreeList+0xac>)
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e002      	b.n	8005b14 <prvInsertBlockIntoFreeList+0x14>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d8f7      	bhi.n	8005b0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	4413      	add	r3, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d108      	bne.n	8005b42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	441a      	add	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	441a      	add	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d118      	bne.n	8005b88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b15      	ldr	r3, [pc, #84]	@ (8005bb0 <prvInsertBlockIntoFreeList+0xb0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d00d      	beq.n	8005b7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	441a      	add	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	e008      	b.n	8005b90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb0 <prvInsertBlockIntoFreeList+0xb0>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	e003      	b.n	8005b90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d002      	beq.n	8005b9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	200046dc 	.word	0x200046dc
 8005bb0:	200046e4 	.word	0x200046e4

08005bb4 <siprintf>:
 8005bb4:	b40e      	push	{r1, r2, r3}
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	b09d      	sub	sp, #116	@ 0x74
 8005bba:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005bbc:	9002      	str	r0, [sp, #8]
 8005bbe:	9006      	str	r0, [sp, #24]
 8005bc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005bc4:	480a      	ldr	r0, [pc, #40]	@ (8005bf0 <siprintf+0x3c>)
 8005bc6:	9107      	str	r1, [sp, #28]
 8005bc8:	9104      	str	r1, [sp, #16]
 8005bca:	490a      	ldr	r1, [pc, #40]	@ (8005bf4 <siprintf+0x40>)
 8005bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bd0:	9105      	str	r1, [sp, #20]
 8005bd2:	2400      	movs	r4, #0
 8005bd4:	a902      	add	r1, sp, #8
 8005bd6:	6800      	ldr	r0, [r0, #0]
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005bdc:	f000 fa00 	bl	8005fe0 <_svfiprintf_r>
 8005be0:	9b02      	ldr	r3, [sp, #8]
 8005be2:	701c      	strb	r4, [r3, #0]
 8005be4:	b01d      	add	sp, #116	@ 0x74
 8005be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bea:	b003      	add	sp, #12
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000010 	.word	0x20000010
 8005bf4:	ffff0208 	.word	0xffff0208

08005bf8 <memset>:
 8005bf8:	4402      	add	r2, r0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d100      	bne.n	8005c02 <memset+0xa>
 8005c00:	4770      	bx	lr
 8005c02:	f803 1b01 	strb.w	r1, [r3], #1
 8005c06:	e7f9      	b.n	8005bfc <memset+0x4>

08005c08 <_reclaim_reent>:
 8005c08:	4b2d      	ldr	r3, [pc, #180]	@ (8005cc0 <_reclaim_reent+0xb8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4283      	cmp	r3, r0
 8005c0e:	b570      	push	{r4, r5, r6, lr}
 8005c10:	4604      	mov	r4, r0
 8005c12:	d053      	beq.n	8005cbc <_reclaim_reent+0xb4>
 8005c14:	69c3      	ldr	r3, [r0, #28]
 8005c16:	b31b      	cbz	r3, 8005c60 <_reclaim_reent+0x58>
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	b163      	cbz	r3, 8005c36 <_reclaim_reent+0x2e>
 8005c1c:	2500      	movs	r5, #0
 8005c1e:	69e3      	ldr	r3, [r4, #28]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	5959      	ldr	r1, [r3, r5]
 8005c24:	b9b1      	cbnz	r1, 8005c54 <_reclaim_reent+0x4c>
 8005c26:	3504      	adds	r5, #4
 8005c28:	2d80      	cmp	r5, #128	@ 0x80
 8005c2a:	d1f8      	bne.n	8005c1e <_reclaim_reent+0x16>
 8005c2c:	69e3      	ldr	r3, [r4, #28]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	68d9      	ldr	r1, [r3, #12]
 8005c32:	f000 f881 	bl	8005d38 <_free_r>
 8005c36:	69e3      	ldr	r3, [r4, #28]
 8005c38:	6819      	ldr	r1, [r3, #0]
 8005c3a:	b111      	cbz	r1, 8005c42 <_reclaim_reent+0x3a>
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f000 f87b 	bl	8005d38 <_free_r>
 8005c42:	69e3      	ldr	r3, [r4, #28]
 8005c44:	689d      	ldr	r5, [r3, #8]
 8005c46:	b15d      	cbz	r5, 8005c60 <_reclaim_reent+0x58>
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	682d      	ldr	r5, [r5, #0]
 8005c4e:	f000 f873 	bl	8005d38 <_free_r>
 8005c52:	e7f8      	b.n	8005c46 <_reclaim_reent+0x3e>
 8005c54:	680e      	ldr	r6, [r1, #0]
 8005c56:	4620      	mov	r0, r4
 8005c58:	f000 f86e 	bl	8005d38 <_free_r>
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	e7e1      	b.n	8005c24 <_reclaim_reent+0x1c>
 8005c60:	6961      	ldr	r1, [r4, #20]
 8005c62:	b111      	cbz	r1, 8005c6a <_reclaim_reent+0x62>
 8005c64:	4620      	mov	r0, r4
 8005c66:	f000 f867 	bl	8005d38 <_free_r>
 8005c6a:	69e1      	ldr	r1, [r4, #28]
 8005c6c:	b111      	cbz	r1, 8005c74 <_reclaim_reent+0x6c>
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 f862 	bl	8005d38 <_free_r>
 8005c74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005c76:	b111      	cbz	r1, 8005c7e <_reclaim_reent+0x76>
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 f85d 	bl	8005d38 <_free_r>
 8005c7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c80:	b111      	cbz	r1, 8005c88 <_reclaim_reent+0x80>
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 f858 	bl	8005d38 <_free_r>
 8005c88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005c8a:	b111      	cbz	r1, 8005c92 <_reclaim_reent+0x8a>
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 f853 	bl	8005d38 <_free_r>
 8005c92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005c94:	b111      	cbz	r1, 8005c9c <_reclaim_reent+0x94>
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 f84e 	bl	8005d38 <_free_r>
 8005c9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005c9e:	b111      	cbz	r1, 8005ca6 <_reclaim_reent+0x9e>
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 f849 	bl	8005d38 <_free_r>
 8005ca6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ca8:	b111      	cbz	r1, 8005cb0 <_reclaim_reent+0xa8>
 8005caa:	4620      	mov	r0, r4
 8005cac:	f000 f844 	bl	8005d38 <_free_r>
 8005cb0:	6a23      	ldr	r3, [r4, #32]
 8005cb2:	b11b      	cbz	r3, 8005cbc <_reclaim_reent+0xb4>
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005cba:	4718      	bx	r3
 8005cbc:	bd70      	pop	{r4, r5, r6, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000010 	.word	0x20000010

08005cc4 <__errno>:
 8005cc4:	4b01      	ldr	r3, [pc, #4]	@ (8005ccc <__errno+0x8>)
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000010 	.word	0x20000010

08005cd0 <__libc_init_array>:
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8005d08 <__libc_init_array+0x38>)
 8005cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8005d0c <__libc_init_array+0x3c>)
 8005cd6:	1b64      	subs	r4, r4, r5
 8005cd8:	10a4      	asrs	r4, r4, #2
 8005cda:	2600      	movs	r6, #0
 8005cdc:	42a6      	cmp	r6, r4
 8005cde:	d109      	bne.n	8005cf4 <__libc_init_array+0x24>
 8005ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8005d10 <__libc_init_array+0x40>)
 8005ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8005d14 <__libc_init_array+0x44>)
 8005ce4:	f000 fc64 	bl	80065b0 <_init>
 8005ce8:	1b64      	subs	r4, r4, r5
 8005cea:	10a4      	asrs	r4, r4, #2
 8005cec:	2600      	movs	r6, #0
 8005cee:	42a6      	cmp	r6, r4
 8005cf0:	d105      	bne.n	8005cfe <__libc_init_array+0x2e>
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf8:	4798      	blx	r3
 8005cfa:	3601      	adds	r6, #1
 8005cfc:	e7ee      	b.n	8005cdc <__libc_init_array+0xc>
 8005cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d02:	4798      	blx	r3
 8005d04:	3601      	adds	r6, #1
 8005d06:	e7f2      	b.n	8005cee <__libc_init_array+0x1e>
 8005d08:	08006698 	.word	0x08006698
 8005d0c:	08006698 	.word	0x08006698
 8005d10:	08006698 	.word	0x08006698
 8005d14:	0800669c 	.word	0x0800669c

08005d18 <__retarget_lock_acquire_recursive>:
 8005d18:	4770      	bx	lr

08005d1a <__retarget_lock_release_recursive>:
 8005d1a:	4770      	bx	lr

08005d1c <memcpy>:
 8005d1c:	440a      	add	r2, r1
 8005d1e:	4291      	cmp	r1, r2
 8005d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d24:	d100      	bne.n	8005d28 <memcpy+0xc>
 8005d26:	4770      	bx	lr
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d32:	4291      	cmp	r1, r2
 8005d34:	d1f9      	bne.n	8005d2a <memcpy+0xe>
 8005d36:	bd10      	pop	{r4, pc}

08005d38 <_free_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	d041      	beq.n	8005dc4 <_free_r+0x8c>
 8005d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d44:	1f0c      	subs	r4, r1, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bfb8      	it	lt
 8005d4a:	18e4      	addlt	r4, r4, r3
 8005d4c:	f000 f8e0 	bl	8005f10 <__malloc_lock>
 8005d50:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc8 <_free_r+0x90>)
 8005d52:	6813      	ldr	r3, [r2, #0]
 8005d54:	b933      	cbnz	r3, 8005d64 <_free_r+0x2c>
 8005d56:	6063      	str	r3, [r4, #4]
 8005d58:	6014      	str	r4, [r2, #0]
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d60:	f000 b8dc 	b.w	8005f1c <__malloc_unlock>
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	d908      	bls.n	8005d7a <_free_r+0x42>
 8005d68:	6820      	ldr	r0, [r4, #0]
 8005d6a:	1821      	adds	r1, r4, r0
 8005d6c:	428b      	cmp	r3, r1
 8005d6e:	bf01      	itttt	eq
 8005d70:	6819      	ldreq	r1, [r3, #0]
 8005d72:	685b      	ldreq	r3, [r3, #4]
 8005d74:	1809      	addeq	r1, r1, r0
 8005d76:	6021      	streq	r1, [r4, #0]
 8005d78:	e7ed      	b.n	8005d56 <_free_r+0x1e>
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	b10b      	cbz	r3, 8005d84 <_free_r+0x4c>
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	d9fa      	bls.n	8005d7a <_free_r+0x42>
 8005d84:	6811      	ldr	r1, [r2, #0]
 8005d86:	1850      	adds	r0, r2, r1
 8005d88:	42a0      	cmp	r0, r4
 8005d8a:	d10b      	bne.n	8005da4 <_free_r+0x6c>
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	4401      	add	r1, r0
 8005d90:	1850      	adds	r0, r2, r1
 8005d92:	4283      	cmp	r3, r0
 8005d94:	6011      	str	r1, [r2, #0]
 8005d96:	d1e0      	bne.n	8005d5a <_free_r+0x22>
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	6053      	str	r3, [r2, #4]
 8005d9e:	4408      	add	r0, r1
 8005da0:	6010      	str	r0, [r2, #0]
 8005da2:	e7da      	b.n	8005d5a <_free_r+0x22>
 8005da4:	d902      	bls.n	8005dac <_free_r+0x74>
 8005da6:	230c      	movs	r3, #12
 8005da8:	602b      	str	r3, [r5, #0]
 8005daa:	e7d6      	b.n	8005d5a <_free_r+0x22>
 8005dac:	6820      	ldr	r0, [r4, #0]
 8005dae:	1821      	adds	r1, r4, r0
 8005db0:	428b      	cmp	r3, r1
 8005db2:	bf04      	itt	eq
 8005db4:	6819      	ldreq	r1, [r3, #0]
 8005db6:	685b      	ldreq	r3, [r3, #4]
 8005db8:	6063      	str	r3, [r4, #4]
 8005dba:	bf04      	itt	eq
 8005dbc:	1809      	addeq	r1, r1, r0
 8005dbe:	6021      	streq	r1, [r4, #0]
 8005dc0:	6054      	str	r4, [r2, #4]
 8005dc2:	e7ca      	b.n	8005d5a <_free_r+0x22>
 8005dc4:	bd38      	pop	{r3, r4, r5, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20004840 	.word	0x20004840

08005dcc <sbrk_aligned>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	4e0f      	ldr	r6, [pc, #60]	@ (8005e0c <sbrk_aligned+0x40>)
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	6831      	ldr	r1, [r6, #0]
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	b911      	cbnz	r1, 8005dde <sbrk_aligned+0x12>
 8005dd8:	f000 fba4 	bl	8006524 <_sbrk_r>
 8005ddc:	6030      	str	r0, [r6, #0]
 8005dde:	4621      	mov	r1, r4
 8005de0:	4628      	mov	r0, r5
 8005de2:	f000 fb9f 	bl	8006524 <_sbrk_r>
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	d103      	bne.n	8005df2 <sbrk_aligned+0x26>
 8005dea:	f04f 34ff 	mov.w	r4, #4294967295
 8005dee:	4620      	mov	r0, r4
 8005df0:	bd70      	pop	{r4, r5, r6, pc}
 8005df2:	1cc4      	adds	r4, r0, #3
 8005df4:	f024 0403 	bic.w	r4, r4, #3
 8005df8:	42a0      	cmp	r0, r4
 8005dfa:	d0f8      	beq.n	8005dee <sbrk_aligned+0x22>
 8005dfc:	1a21      	subs	r1, r4, r0
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 fb90 	bl	8006524 <_sbrk_r>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d1f2      	bne.n	8005dee <sbrk_aligned+0x22>
 8005e08:	e7ef      	b.n	8005dea <sbrk_aligned+0x1e>
 8005e0a:	bf00      	nop
 8005e0c:	2000483c 	.word	0x2000483c

08005e10 <_malloc_r>:
 8005e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e14:	1ccd      	adds	r5, r1, #3
 8005e16:	f025 0503 	bic.w	r5, r5, #3
 8005e1a:	3508      	adds	r5, #8
 8005e1c:	2d0c      	cmp	r5, #12
 8005e1e:	bf38      	it	cc
 8005e20:	250c      	movcc	r5, #12
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	4606      	mov	r6, r0
 8005e26:	db01      	blt.n	8005e2c <_malloc_r+0x1c>
 8005e28:	42a9      	cmp	r1, r5
 8005e2a:	d904      	bls.n	8005e36 <_malloc_r+0x26>
 8005e2c:	230c      	movs	r3, #12
 8005e2e:	6033      	str	r3, [r6, #0]
 8005e30:	2000      	movs	r0, #0
 8005e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f0c <_malloc_r+0xfc>
 8005e3a:	f000 f869 	bl	8005f10 <__malloc_lock>
 8005e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e42:	461c      	mov	r4, r3
 8005e44:	bb44      	cbnz	r4, 8005e98 <_malloc_r+0x88>
 8005e46:	4629      	mov	r1, r5
 8005e48:	4630      	mov	r0, r6
 8005e4a:	f7ff ffbf 	bl	8005dcc <sbrk_aligned>
 8005e4e:	1c43      	adds	r3, r0, #1
 8005e50:	4604      	mov	r4, r0
 8005e52:	d158      	bne.n	8005f06 <_malloc_r+0xf6>
 8005e54:	f8d8 4000 	ldr.w	r4, [r8]
 8005e58:	4627      	mov	r7, r4
 8005e5a:	2f00      	cmp	r7, #0
 8005e5c:	d143      	bne.n	8005ee6 <_malloc_r+0xd6>
 8005e5e:	2c00      	cmp	r4, #0
 8005e60:	d04b      	beq.n	8005efa <_malloc_r+0xea>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	4639      	mov	r1, r7
 8005e66:	4630      	mov	r0, r6
 8005e68:	eb04 0903 	add.w	r9, r4, r3
 8005e6c:	f000 fb5a 	bl	8006524 <_sbrk_r>
 8005e70:	4581      	cmp	r9, r0
 8005e72:	d142      	bne.n	8005efa <_malloc_r+0xea>
 8005e74:	6821      	ldr	r1, [r4, #0]
 8005e76:	1a6d      	subs	r5, r5, r1
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f7ff ffa6 	bl	8005dcc <sbrk_aligned>
 8005e80:	3001      	adds	r0, #1
 8005e82:	d03a      	beq.n	8005efa <_malloc_r+0xea>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	442b      	add	r3, r5
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	bb62      	cbnz	r2, 8005eec <_malloc_r+0xdc>
 8005e92:	f8c8 7000 	str.w	r7, [r8]
 8005e96:	e00f      	b.n	8005eb8 <_malloc_r+0xa8>
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	1b52      	subs	r2, r2, r5
 8005e9c:	d420      	bmi.n	8005ee0 <_malloc_r+0xd0>
 8005e9e:	2a0b      	cmp	r2, #11
 8005ea0:	d917      	bls.n	8005ed2 <_malloc_r+0xc2>
 8005ea2:	1961      	adds	r1, r4, r5
 8005ea4:	42a3      	cmp	r3, r4
 8005ea6:	6025      	str	r5, [r4, #0]
 8005ea8:	bf18      	it	ne
 8005eaa:	6059      	strne	r1, [r3, #4]
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	bf08      	it	eq
 8005eb0:	f8c8 1000 	streq.w	r1, [r8]
 8005eb4:	5162      	str	r2, [r4, r5]
 8005eb6:	604b      	str	r3, [r1, #4]
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f000 f82f 	bl	8005f1c <__malloc_unlock>
 8005ebe:	f104 000b 	add.w	r0, r4, #11
 8005ec2:	1d23      	adds	r3, r4, #4
 8005ec4:	f020 0007 	bic.w	r0, r0, #7
 8005ec8:	1ac2      	subs	r2, r0, r3
 8005eca:	bf1c      	itt	ne
 8005ecc:	1a1b      	subne	r3, r3, r0
 8005ece:	50a3      	strne	r3, [r4, r2]
 8005ed0:	e7af      	b.n	8005e32 <_malloc_r+0x22>
 8005ed2:	6862      	ldr	r2, [r4, #4]
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	bf0c      	ite	eq
 8005ed8:	f8c8 2000 	streq.w	r2, [r8]
 8005edc:	605a      	strne	r2, [r3, #4]
 8005ede:	e7eb      	b.n	8005eb8 <_malloc_r+0xa8>
 8005ee0:	4623      	mov	r3, r4
 8005ee2:	6864      	ldr	r4, [r4, #4]
 8005ee4:	e7ae      	b.n	8005e44 <_malloc_r+0x34>
 8005ee6:	463c      	mov	r4, r7
 8005ee8:	687f      	ldr	r7, [r7, #4]
 8005eea:	e7b6      	b.n	8005e5a <_malloc_r+0x4a>
 8005eec:	461a      	mov	r2, r3
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	d1fb      	bne.n	8005eec <_malloc_r+0xdc>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	6053      	str	r3, [r2, #4]
 8005ef8:	e7de      	b.n	8005eb8 <_malloc_r+0xa8>
 8005efa:	230c      	movs	r3, #12
 8005efc:	6033      	str	r3, [r6, #0]
 8005efe:	4630      	mov	r0, r6
 8005f00:	f000 f80c 	bl	8005f1c <__malloc_unlock>
 8005f04:	e794      	b.n	8005e30 <_malloc_r+0x20>
 8005f06:	6005      	str	r5, [r0, #0]
 8005f08:	e7d6      	b.n	8005eb8 <_malloc_r+0xa8>
 8005f0a:	bf00      	nop
 8005f0c:	20004840 	.word	0x20004840

08005f10 <__malloc_lock>:
 8005f10:	4801      	ldr	r0, [pc, #4]	@ (8005f18 <__malloc_lock+0x8>)
 8005f12:	f7ff bf01 	b.w	8005d18 <__retarget_lock_acquire_recursive>
 8005f16:	bf00      	nop
 8005f18:	20004838 	.word	0x20004838

08005f1c <__malloc_unlock>:
 8005f1c:	4801      	ldr	r0, [pc, #4]	@ (8005f24 <__malloc_unlock+0x8>)
 8005f1e:	f7ff befc 	b.w	8005d1a <__retarget_lock_release_recursive>
 8005f22:	bf00      	nop
 8005f24:	20004838 	.word	0x20004838

08005f28 <__ssputs_r>:
 8005f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	688e      	ldr	r6, [r1, #8]
 8005f2e:	461f      	mov	r7, r3
 8005f30:	42be      	cmp	r6, r7
 8005f32:	680b      	ldr	r3, [r1, #0]
 8005f34:	4682      	mov	sl, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	4690      	mov	r8, r2
 8005f3a:	d82d      	bhi.n	8005f98 <__ssputs_r+0x70>
 8005f3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f44:	d026      	beq.n	8005f94 <__ssputs_r+0x6c>
 8005f46:	6965      	ldr	r5, [r4, #20]
 8005f48:	6909      	ldr	r1, [r1, #16]
 8005f4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f4e:	eba3 0901 	sub.w	r9, r3, r1
 8005f52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f56:	1c7b      	adds	r3, r7, #1
 8005f58:	444b      	add	r3, r9
 8005f5a:	106d      	asrs	r5, r5, #1
 8005f5c:	429d      	cmp	r5, r3
 8005f5e:	bf38      	it	cc
 8005f60:	461d      	movcc	r5, r3
 8005f62:	0553      	lsls	r3, r2, #21
 8005f64:	d527      	bpl.n	8005fb6 <__ssputs_r+0x8e>
 8005f66:	4629      	mov	r1, r5
 8005f68:	f7ff ff52 	bl	8005e10 <_malloc_r>
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	b360      	cbz	r0, 8005fca <__ssputs_r+0xa2>
 8005f70:	6921      	ldr	r1, [r4, #16]
 8005f72:	464a      	mov	r2, r9
 8005f74:	f7ff fed2 	bl	8005d1c <memcpy>
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f82:	81a3      	strh	r3, [r4, #12]
 8005f84:	6126      	str	r6, [r4, #16]
 8005f86:	6165      	str	r5, [r4, #20]
 8005f88:	444e      	add	r6, r9
 8005f8a:	eba5 0509 	sub.w	r5, r5, r9
 8005f8e:	6026      	str	r6, [r4, #0]
 8005f90:	60a5      	str	r5, [r4, #8]
 8005f92:	463e      	mov	r6, r7
 8005f94:	42be      	cmp	r6, r7
 8005f96:	d900      	bls.n	8005f9a <__ssputs_r+0x72>
 8005f98:	463e      	mov	r6, r7
 8005f9a:	6820      	ldr	r0, [r4, #0]
 8005f9c:	4632      	mov	r2, r6
 8005f9e:	4641      	mov	r1, r8
 8005fa0:	f000 faa6 	bl	80064f0 <memmove>
 8005fa4:	68a3      	ldr	r3, [r4, #8]
 8005fa6:	1b9b      	subs	r3, r3, r6
 8005fa8:	60a3      	str	r3, [r4, #8]
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	4433      	add	r3, r6
 8005fae:	6023      	str	r3, [r4, #0]
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb6:	462a      	mov	r2, r5
 8005fb8:	f000 fac4 	bl	8006544 <_realloc_r>
 8005fbc:	4606      	mov	r6, r0
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d1e0      	bne.n	8005f84 <__ssputs_r+0x5c>
 8005fc2:	6921      	ldr	r1, [r4, #16]
 8005fc4:	4650      	mov	r0, sl
 8005fc6:	f7ff feb7 	bl	8005d38 <_free_r>
 8005fca:	230c      	movs	r3, #12
 8005fcc:	f8ca 3000 	str.w	r3, [sl]
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fd6:	81a3      	strh	r3, [r4, #12]
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fdc:	e7e9      	b.n	8005fb2 <__ssputs_r+0x8a>
	...

08005fe0 <_svfiprintf_r>:
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	4698      	mov	r8, r3
 8005fe6:	898b      	ldrh	r3, [r1, #12]
 8005fe8:	061b      	lsls	r3, r3, #24
 8005fea:	b09d      	sub	sp, #116	@ 0x74
 8005fec:	4607      	mov	r7, r0
 8005fee:	460d      	mov	r5, r1
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	d510      	bpl.n	8006016 <_svfiprintf_r+0x36>
 8005ff4:	690b      	ldr	r3, [r1, #16]
 8005ff6:	b973      	cbnz	r3, 8006016 <_svfiprintf_r+0x36>
 8005ff8:	2140      	movs	r1, #64	@ 0x40
 8005ffa:	f7ff ff09 	bl	8005e10 <_malloc_r>
 8005ffe:	6028      	str	r0, [r5, #0]
 8006000:	6128      	str	r0, [r5, #16]
 8006002:	b930      	cbnz	r0, 8006012 <_svfiprintf_r+0x32>
 8006004:	230c      	movs	r3, #12
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	f04f 30ff 	mov.w	r0, #4294967295
 800600c:	b01d      	add	sp, #116	@ 0x74
 800600e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006012:	2340      	movs	r3, #64	@ 0x40
 8006014:	616b      	str	r3, [r5, #20]
 8006016:	2300      	movs	r3, #0
 8006018:	9309      	str	r3, [sp, #36]	@ 0x24
 800601a:	2320      	movs	r3, #32
 800601c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006020:	f8cd 800c 	str.w	r8, [sp, #12]
 8006024:	2330      	movs	r3, #48	@ 0x30
 8006026:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80061c4 <_svfiprintf_r+0x1e4>
 800602a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800602e:	f04f 0901 	mov.w	r9, #1
 8006032:	4623      	mov	r3, r4
 8006034:	469a      	mov	sl, r3
 8006036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800603a:	b10a      	cbz	r2, 8006040 <_svfiprintf_r+0x60>
 800603c:	2a25      	cmp	r2, #37	@ 0x25
 800603e:	d1f9      	bne.n	8006034 <_svfiprintf_r+0x54>
 8006040:	ebba 0b04 	subs.w	fp, sl, r4
 8006044:	d00b      	beq.n	800605e <_svfiprintf_r+0x7e>
 8006046:	465b      	mov	r3, fp
 8006048:	4622      	mov	r2, r4
 800604a:	4629      	mov	r1, r5
 800604c:	4638      	mov	r0, r7
 800604e:	f7ff ff6b 	bl	8005f28 <__ssputs_r>
 8006052:	3001      	adds	r0, #1
 8006054:	f000 80a7 	beq.w	80061a6 <_svfiprintf_r+0x1c6>
 8006058:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800605a:	445a      	add	r2, fp
 800605c:	9209      	str	r2, [sp, #36]	@ 0x24
 800605e:	f89a 3000 	ldrb.w	r3, [sl]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 809f 	beq.w	80061a6 <_svfiprintf_r+0x1c6>
 8006068:	2300      	movs	r3, #0
 800606a:	f04f 32ff 	mov.w	r2, #4294967295
 800606e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006072:	f10a 0a01 	add.w	sl, sl, #1
 8006076:	9304      	str	r3, [sp, #16]
 8006078:	9307      	str	r3, [sp, #28]
 800607a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800607e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006080:	4654      	mov	r4, sl
 8006082:	2205      	movs	r2, #5
 8006084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006088:	484e      	ldr	r0, [pc, #312]	@ (80061c4 <_svfiprintf_r+0x1e4>)
 800608a:	f7fa f8b1 	bl	80001f0 <memchr>
 800608e:	9a04      	ldr	r2, [sp, #16]
 8006090:	b9d8      	cbnz	r0, 80060ca <_svfiprintf_r+0xea>
 8006092:	06d0      	lsls	r0, r2, #27
 8006094:	bf44      	itt	mi
 8006096:	2320      	movmi	r3, #32
 8006098:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800609c:	0711      	lsls	r1, r2, #28
 800609e:	bf44      	itt	mi
 80060a0:	232b      	movmi	r3, #43	@ 0x2b
 80060a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060a6:	f89a 3000 	ldrb.w	r3, [sl]
 80060aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ac:	d015      	beq.n	80060da <_svfiprintf_r+0xfa>
 80060ae:	9a07      	ldr	r2, [sp, #28]
 80060b0:	4654      	mov	r4, sl
 80060b2:	2000      	movs	r0, #0
 80060b4:	f04f 0c0a 	mov.w	ip, #10
 80060b8:	4621      	mov	r1, r4
 80060ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060be:	3b30      	subs	r3, #48	@ 0x30
 80060c0:	2b09      	cmp	r3, #9
 80060c2:	d94b      	bls.n	800615c <_svfiprintf_r+0x17c>
 80060c4:	b1b0      	cbz	r0, 80060f4 <_svfiprintf_r+0x114>
 80060c6:	9207      	str	r2, [sp, #28]
 80060c8:	e014      	b.n	80060f4 <_svfiprintf_r+0x114>
 80060ca:	eba0 0308 	sub.w	r3, r0, r8
 80060ce:	fa09 f303 	lsl.w	r3, r9, r3
 80060d2:	4313      	orrs	r3, r2
 80060d4:	9304      	str	r3, [sp, #16]
 80060d6:	46a2      	mov	sl, r4
 80060d8:	e7d2      	b.n	8006080 <_svfiprintf_r+0xa0>
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	1d19      	adds	r1, r3, #4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	9103      	str	r1, [sp, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bfbb      	ittet	lt
 80060e6:	425b      	neglt	r3, r3
 80060e8:	f042 0202 	orrlt.w	r2, r2, #2
 80060ec:	9307      	strge	r3, [sp, #28]
 80060ee:	9307      	strlt	r3, [sp, #28]
 80060f0:	bfb8      	it	lt
 80060f2:	9204      	strlt	r2, [sp, #16]
 80060f4:	7823      	ldrb	r3, [r4, #0]
 80060f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80060f8:	d10a      	bne.n	8006110 <_svfiprintf_r+0x130>
 80060fa:	7863      	ldrb	r3, [r4, #1]
 80060fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80060fe:	d132      	bne.n	8006166 <_svfiprintf_r+0x186>
 8006100:	9b03      	ldr	r3, [sp, #12]
 8006102:	1d1a      	adds	r2, r3, #4
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	9203      	str	r2, [sp, #12]
 8006108:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800610c:	3402      	adds	r4, #2
 800610e:	9305      	str	r3, [sp, #20]
 8006110:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80061d4 <_svfiprintf_r+0x1f4>
 8006114:	7821      	ldrb	r1, [r4, #0]
 8006116:	2203      	movs	r2, #3
 8006118:	4650      	mov	r0, sl
 800611a:	f7fa f869 	bl	80001f0 <memchr>
 800611e:	b138      	cbz	r0, 8006130 <_svfiprintf_r+0x150>
 8006120:	9b04      	ldr	r3, [sp, #16]
 8006122:	eba0 000a 	sub.w	r0, r0, sl
 8006126:	2240      	movs	r2, #64	@ 0x40
 8006128:	4082      	lsls	r2, r0
 800612a:	4313      	orrs	r3, r2
 800612c:	3401      	adds	r4, #1
 800612e:	9304      	str	r3, [sp, #16]
 8006130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006134:	4824      	ldr	r0, [pc, #144]	@ (80061c8 <_svfiprintf_r+0x1e8>)
 8006136:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800613a:	2206      	movs	r2, #6
 800613c:	f7fa f858 	bl	80001f0 <memchr>
 8006140:	2800      	cmp	r0, #0
 8006142:	d036      	beq.n	80061b2 <_svfiprintf_r+0x1d2>
 8006144:	4b21      	ldr	r3, [pc, #132]	@ (80061cc <_svfiprintf_r+0x1ec>)
 8006146:	bb1b      	cbnz	r3, 8006190 <_svfiprintf_r+0x1b0>
 8006148:	9b03      	ldr	r3, [sp, #12]
 800614a:	3307      	adds	r3, #7
 800614c:	f023 0307 	bic.w	r3, r3, #7
 8006150:	3308      	adds	r3, #8
 8006152:	9303      	str	r3, [sp, #12]
 8006154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006156:	4433      	add	r3, r6
 8006158:	9309      	str	r3, [sp, #36]	@ 0x24
 800615a:	e76a      	b.n	8006032 <_svfiprintf_r+0x52>
 800615c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006160:	460c      	mov	r4, r1
 8006162:	2001      	movs	r0, #1
 8006164:	e7a8      	b.n	80060b8 <_svfiprintf_r+0xd8>
 8006166:	2300      	movs	r3, #0
 8006168:	3401      	adds	r4, #1
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	4619      	mov	r1, r3
 800616e:	f04f 0c0a 	mov.w	ip, #10
 8006172:	4620      	mov	r0, r4
 8006174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006178:	3a30      	subs	r2, #48	@ 0x30
 800617a:	2a09      	cmp	r2, #9
 800617c:	d903      	bls.n	8006186 <_svfiprintf_r+0x1a6>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0c6      	beq.n	8006110 <_svfiprintf_r+0x130>
 8006182:	9105      	str	r1, [sp, #20]
 8006184:	e7c4      	b.n	8006110 <_svfiprintf_r+0x130>
 8006186:	fb0c 2101 	mla	r1, ip, r1, r2
 800618a:	4604      	mov	r4, r0
 800618c:	2301      	movs	r3, #1
 800618e:	e7f0      	b.n	8006172 <_svfiprintf_r+0x192>
 8006190:	ab03      	add	r3, sp, #12
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	462a      	mov	r2, r5
 8006196:	4b0e      	ldr	r3, [pc, #56]	@ (80061d0 <_svfiprintf_r+0x1f0>)
 8006198:	a904      	add	r1, sp, #16
 800619a:	4638      	mov	r0, r7
 800619c:	f3af 8000 	nop.w
 80061a0:	1c42      	adds	r2, r0, #1
 80061a2:	4606      	mov	r6, r0
 80061a4:	d1d6      	bne.n	8006154 <_svfiprintf_r+0x174>
 80061a6:	89ab      	ldrh	r3, [r5, #12]
 80061a8:	065b      	lsls	r3, r3, #25
 80061aa:	f53f af2d 	bmi.w	8006008 <_svfiprintf_r+0x28>
 80061ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061b0:	e72c      	b.n	800600c <_svfiprintf_r+0x2c>
 80061b2:	ab03      	add	r3, sp, #12
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	462a      	mov	r2, r5
 80061b8:	4b05      	ldr	r3, [pc, #20]	@ (80061d0 <_svfiprintf_r+0x1f0>)
 80061ba:	a904      	add	r1, sp, #16
 80061bc:	4638      	mov	r0, r7
 80061be:	f000 f879 	bl	80062b4 <_printf_i>
 80061c2:	e7ed      	b.n	80061a0 <_svfiprintf_r+0x1c0>
 80061c4:	0800665c 	.word	0x0800665c
 80061c8:	08006666 	.word	0x08006666
 80061cc:	00000000 	.word	0x00000000
 80061d0:	08005f29 	.word	0x08005f29
 80061d4:	08006662 	.word	0x08006662

080061d8 <_printf_common>:
 80061d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061dc:	4616      	mov	r6, r2
 80061de:	4698      	mov	r8, r3
 80061e0:	688a      	ldr	r2, [r1, #8]
 80061e2:	690b      	ldr	r3, [r1, #16]
 80061e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061e8:	4293      	cmp	r3, r2
 80061ea:	bfb8      	it	lt
 80061ec:	4613      	movlt	r3, r2
 80061ee:	6033      	str	r3, [r6, #0]
 80061f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061f4:	4607      	mov	r7, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	b10a      	cbz	r2, 80061fe <_printf_common+0x26>
 80061fa:	3301      	adds	r3, #1
 80061fc:	6033      	str	r3, [r6, #0]
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	0699      	lsls	r1, r3, #26
 8006202:	bf42      	ittt	mi
 8006204:	6833      	ldrmi	r3, [r6, #0]
 8006206:	3302      	addmi	r3, #2
 8006208:	6033      	strmi	r3, [r6, #0]
 800620a:	6825      	ldr	r5, [r4, #0]
 800620c:	f015 0506 	ands.w	r5, r5, #6
 8006210:	d106      	bne.n	8006220 <_printf_common+0x48>
 8006212:	f104 0a19 	add.w	sl, r4, #25
 8006216:	68e3      	ldr	r3, [r4, #12]
 8006218:	6832      	ldr	r2, [r6, #0]
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	42ab      	cmp	r3, r5
 800621e:	dc26      	bgt.n	800626e <_printf_common+0x96>
 8006220:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006224:	6822      	ldr	r2, [r4, #0]
 8006226:	3b00      	subs	r3, #0
 8006228:	bf18      	it	ne
 800622a:	2301      	movne	r3, #1
 800622c:	0692      	lsls	r2, r2, #26
 800622e:	d42b      	bmi.n	8006288 <_printf_common+0xb0>
 8006230:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006234:	4641      	mov	r1, r8
 8006236:	4638      	mov	r0, r7
 8006238:	47c8      	blx	r9
 800623a:	3001      	adds	r0, #1
 800623c:	d01e      	beq.n	800627c <_printf_common+0xa4>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	6922      	ldr	r2, [r4, #16]
 8006242:	f003 0306 	and.w	r3, r3, #6
 8006246:	2b04      	cmp	r3, #4
 8006248:	bf02      	ittt	eq
 800624a:	68e5      	ldreq	r5, [r4, #12]
 800624c:	6833      	ldreq	r3, [r6, #0]
 800624e:	1aed      	subeq	r5, r5, r3
 8006250:	68a3      	ldr	r3, [r4, #8]
 8006252:	bf0c      	ite	eq
 8006254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006258:	2500      	movne	r5, #0
 800625a:	4293      	cmp	r3, r2
 800625c:	bfc4      	itt	gt
 800625e:	1a9b      	subgt	r3, r3, r2
 8006260:	18ed      	addgt	r5, r5, r3
 8006262:	2600      	movs	r6, #0
 8006264:	341a      	adds	r4, #26
 8006266:	42b5      	cmp	r5, r6
 8006268:	d11a      	bne.n	80062a0 <_printf_common+0xc8>
 800626a:	2000      	movs	r0, #0
 800626c:	e008      	b.n	8006280 <_printf_common+0xa8>
 800626e:	2301      	movs	r3, #1
 8006270:	4652      	mov	r2, sl
 8006272:	4641      	mov	r1, r8
 8006274:	4638      	mov	r0, r7
 8006276:	47c8      	blx	r9
 8006278:	3001      	adds	r0, #1
 800627a:	d103      	bne.n	8006284 <_printf_common+0xac>
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006284:	3501      	adds	r5, #1
 8006286:	e7c6      	b.n	8006216 <_printf_common+0x3e>
 8006288:	18e1      	adds	r1, r4, r3
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	2030      	movs	r0, #48	@ 0x30
 800628e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006292:	4422      	add	r2, r4
 8006294:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006298:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800629c:	3302      	adds	r3, #2
 800629e:	e7c7      	b.n	8006230 <_printf_common+0x58>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4622      	mov	r2, r4
 80062a4:	4641      	mov	r1, r8
 80062a6:	4638      	mov	r0, r7
 80062a8:	47c8      	blx	r9
 80062aa:	3001      	adds	r0, #1
 80062ac:	d0e6      	beq.n	800627c <_printf_common+0xa4>
 80062ae:	3601      	adds	r6, #1
 80062b0:	e7d9      	b.n	8006266 <_printf_common+0x8e>
	...

080062b4 <_printf_i>:
 80062b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062b8:	7e0f      	ldrb	r7, [r1, #24]
 80062ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062bc:	2f78      	cmp	r7, #120	@ 0x78
 80062be:	4691      	mov	r9, r2
 80062c0:	4680      	mov	r8, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	469a      	mov	sl, r3
 80062c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062ca:	d807      	bhi.n	80062dc <_printf_i+0x28>
 80062cc:	2f62      	cmp	r7, #98	@ 0x62
 80062ce:	d80a      	bhi.n	80062e6 <_printf_i+0x32>
 80062d0:	2f00      	cmp	r7, #0
 80062d2:	f000 80d1 	beq.w	8006478 <_printf_i+0x1c4>
 80062d6:	2f58      	cmp	r7, #88	@ 0x58
 80062d8:	f000 80b8 	beq.w	800644c <_printf_i+0x198>
 80062dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062e4:	e03a      	b.n	800635c <_printf_i+0xa8>
 80062e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062ea:	2b15      	cmp	r3, #21
 80062ec:	d8f6      	bhi.n	80062dc <_printf_i+0x28>
 80062ee:	a101      	add	r1, pc, #4	@ (adr r1, 80062f4 <_printf_i+0x40>)
 80062f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062f4:	0800634d 	.word	0x0800634d
 80062f8:	08006361 	.word	0x08006361
 80062fc:	080062dd 	.word	0x080062dd
 8006300:	080062dd 	.word	0x080062dd
 8006304:	080062dd 	.word	0x080062dd
 8006308:	080062dd 	.word	0x080062dd
 800630c:	08006361 	.word	0x08006361
 8006310:	080062dd 	.word	0x080062dd
 8006314:	080062dd 	.word	0x080062dd
 8006318:	080062dd 	.word	0x080062dd
 800631c:	080062dd 	.word	0x080062dd
 8006320:	0800645f 	.word	0x0800645f
 8006324:	0800638b 	.word	0x0800638b
 8006328:	08006419 	.word	0x08006419
 800632c:	080062dd 	.word	0x080062dd
 8006330:	080062dd 	.word	0x080062dd
 8006334:	08006481 	.word	0x08006481
 8006338:	080062dd 	.word	0x080062dd
 800633c:	0800638b 	.word	0x0800638b
 8006340:	080062dd 	.word	0x080062dd
 8006344:	080062dd 	.word	0x080062dd
 8006348:	08006421 	.word	0x08006421
 800634c:	6833      	ldr	r3, [r6, #0]
 800634e:	1d1a      	adds	r2, r3, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6032      	str	r2, [r6, #0]
 8006354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006358:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800635c:	2301      	movs	r3, #1
 800635e:	e09c      	b.n	800649a <_printf_i+0x1e6>
 8006360:	6833      	ldr	r3, [r6, #0]
 8006362:	6820      	ldr	r0, [r4, #0]
 8006364:	1d19      	adds	r1, r3, #4
 8006366:	6031      	str	r1, [r6, #0]
 8006368:	0606      	lsls	r6, r0, #24
 800636a:	d501      	bpl.n	8006370 <_printf_i+0xbc>
 800636c:	681d      	ldr	r5, [r3, #0]
 800636e:	e003      	b.n	8006378 <_printf_i+0xc4>
 8006370:	0645      	lsls	r5, r0, #25
 8006372:	d5fb      	bpl.n	800636c <_printf_i+0xb8>
 8006374:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006378:	2d00      	cmp	r5, #0
 800637a:	da03      	bge.n	8006384 <_printf_i+0xd0>
 800637c:	232d      	movs	r3, #45	@ 0x2d
 800637e:	426d      	negs	r5, r5
 8006380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006384:	4858      	ldr	r0, [pc, #352]	@ (80064e8 <_printf_i+0x234>)
 8006386:	230a      	movs	r3, #10
 8006388:	e011      	b.n	80063ae <_printf_i+0xfa>
 800638a:	6821      	ldr	r1, [r4, #0]
 800638c:	6833      	ldr	r3, [r6, #0]
 800638e:	0608      	lsls	r0, r1, #24
 8006390:	f853 5b04 	ldr.w	r5, [r3], #4
 8006394:	d402      	bmi.n	800639c <_printf_i+0xe8>
 8006396:	0649      	lsls	r1, r1, #25
 8006398:	bf48      	it	mi
 800639a:	b2ad      	uxthmi	r5, r5
 800639c:	2f6f      	cmp	r7, #111	@ 0x6f
 800639e:	4852      	ldr	r0, [pc, #328]	@ (80064e8 <_printf_i+0x234>)
 80063a0:	6033      	str	r3, [r6, #0]
 80063a2:	bf14      	ite	ne
 80063a4:	230a      	movne	r3, #10
 80063a6:	2308      	moveq	r3, #8
 80063a8:	2100      	movs	r1, #0
 80063aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063ae:	6866      	ldr	r6, [r4, #4]
 80063b0:	60a6      	str	r6, [r4, #8]
 80063b2:	2e00      	cmp	r6, #0
 80063b4:	db05      	blt.n	80063c2 <_printf_i+0x10e>
 80063b6:	6821      	ldr	r1, [r4, #0]
 80063b8:	432e      	orrs	r6, r5
 80063ba:	f021 0104 	bic.w	r1, r1, #4
 80063be:	6021      	str	r1, [r4, #0]
 80063c0:	d04b      	beq.n	800645a <_printf_i+0x1a6>
 80063c2:	4616      	mov	r6, r2
 80063c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80063c8:	fb03 5711 	mls	r7, r3, r1, r5
 80063cc:	5dc7      	ldrb	r7, [r0, r7]
 80063ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063d2:	462f      	mov	r7, r5
 80063d4:	42bb      	cmp	r3, r7
 80063d6:	460d      	mov	r5, r1
 80063d8:	d9f4      	bls.n	80063c4 <_printf_i+0x110>
 80063da:	2b08      	cmp	r3, #8
 80063dc:	d10b      	bne.n	80063f6 <_printf_i+0x142>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	07df      	lsls	r7, r3, #31
 80063e2:	d508      	bpl.n	80063f6 <_printf_i+0x142>
 80063e4:	6923      	ldr	r3, [r4, #16]
 80063e6:	6861      	ldr	r1, [r4, #4]
 80063e8:	4299      	cmp	r1, r3
 80063ea:	bfde      	ittt	le
 80063ec:	2330      	movle	r3, #48	@ 0x30
 80063ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063f6:	1b92      	subs	r2, r2, r6
 80063f8:	6122      	str	r2, [r4, #16]
 80063fa:	f8cd a000 	str.w	sl, [sp]
 80063fe:	464b      	mov	r3, r9
 8006400:	aa03      	add	r2, sp, #12
 8006402:	4621      	mov	r1, r4
 8006404:	4640      	mov	r0, r8
 8006406:	f7ff fee7 	bl	80061d8 <_printf_common>
 800640a:	3001      	adds	r0, #1
 800640c:	d14a      	bne.n	80064a4 <_printf_i+0x1f0>
 800640e:	f04f 30ff 	mov.w	r0, #4294967295
 8006412:	b004      	add	sp, #16
 8006414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	f043 0320 	orr.w	r3, r3, #32
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	4832      	ldr	r0, [pc, #200]	@ (80064ec <_printf_i+0x238>)
 8006422:	2778      	movs	r7, #120	@ 0x78
 8006424:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	6831      	ldr	r1, [r6, #0]
 800642c:	061f      	lsls	r7, r3, #24
 800642e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006432:	d402      	bmi.n	800643a <_printf_i+0x186>
 8006434:	065f      	lsls	r7, r3, #25
 8006436:	bf48      	it	mi
 8006438:	b2ad      	uxthmi	r5, r5
 800643a:	6031      	str	r1, [r6, #0]
 800643c:	07d9      	lsls	r1, r3, #31
 800643e:	bf44      	itt	mi
 8006440:	f043 0320 	orrmi.w	r3, r3, #32
 8006444:	6023      	strmi	r3, [r4, #0]
 8006446:	b11d      	cbz	r5, 8006450 <_printf_i+0x19c>
 8006448:	2310      	movs	r3, #16
 800644a:	e7ad      	b.n	80063a8 <_printf_i+0xf4>
 800644c:	4826      	ldr	r0, [pc, #152]	@ (80064e8 <_printf_i+0x234>)
 800644e:	e7e9      	b.n	8006424 <_printf_i+0x170>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	f023 0320 	bic.w	r3, r3, #32
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	e7f6      	b.n	8006448 <_printf_i+0x194>
 800645a:	4616      	mov	r6, r2
 800645c:	e7bd      	b.n	80063da <_printf_i+0x126>
 800645e:	6833      	ldr	r3, [r6, #0]
 8006460:	6825      	ldr	r5, [r4, #0]
 8006462:	6961      	ldr	r1, [r4, #20]
 8006464:	1d18      	adds	r0, r3, #4
 8006466:	6030      	str	r0, [r6, #0]
 8006468:	062e      	lsls	r6, r5, #24
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	d501      	bpl.n	8006472 <_printf_i+0x1be>
 800646e:	6019      	str	r1, [r3, #0]
 8006470:	e002      	b.n	8006478 <_printf_i+0x1c4>
 8006472:	0668      	lsls	r0, r5, #25
 8006474:	d5fb      	bpl.n	800646e <_printf_i+0x1ba>
 8006476:	8019      	strh	r1, [r3, #0]
 8006478:	2300      	movs	r3, #0
 800647a:	6123      	str	r3, [r4, #16]
 800647c:	4616      	mov	r6, r2
 800647e:	e7bc      	b.n	80063fa <_printf_i+0x146>
 8006480:	6833      	ldr	r3, [r6, #0]
 8006482:	1d1a      	adds	r2, r3, #4
 8006484:	6032      	str	r2, [r6, #0]
 8006486:	681e      	ldr	r6, [r3, #0]
 8006488:	6862      	ldr	r2, [r4, #4]
 800648a:	2100      	movs	r1, #0
 800648c:	4630      	mov	r0, r6
 800648e:	f7f9 feaf 	bl	80001f0 <memchr>
 8006492:	b108      	cbz	r0, 8006498 <_printf_i+0x1e4>
 8006494:	1b80      	subs	r0, r0, r6
 8006496:	6060      	str	r0, [r4, #4]
 8006498:	6863      	ldr	r3, [r4, #4]
 800649a:	6123      	str	r3, [r4, #16]
 800649c:	2300      	movs	r3, #0
 800649e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a2:	e7aa      	b.n	80063fa <_printf_i+0x146>
 80064a4:	6923      	ldr	r3, [r4, #16]
 80064a6:	4632      	mov	r2, r6
 80064a8:	4649      	mov	r1, r9
 80064aa:	4640      	mov	r0, r8
 80064ac:	47d0      	blx	sl
 80064ae:	3001      	adds	r0, #1
 80064b0:	d0ad      	beq.n	800640e <_printf_i+0x15a>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	079b      	lsls	r3, r3, #30
 80064b6:	d413      	bmi.n	80064e0 <_printf_i+0x22c>
 80064b8:	68e0      	ldr	r0, [r4, #12]
 80064ba:	9b03      	ldr	r3, [sp, #12]
 80064bc:	4298      	cmp	r0, r3
 80064be:	bfb8      	it	lt
 80064c0:	4618      	movlt	r0, r3
 80064c2:	e7a6      	b.n	8006412 <_printf_i+0x15e>
 80064c4:	2301      	movs	r3, #1
 80064c6:	4632      	mov	r2, r6
 80064c8:	4649      	mov	r1, r9
 80064ca:	4640      	mov	r0, r8
 80064cc:	47d0      	blx	sl
 80064ce:	3001      	adds	r0, #1
 80064d0:	d09d      	beq.n	800640e <_printf_i+0x15a>
 80064d2:	3501      	adds	r5, #1
 80064d4:	68e3      	ldr	r3, [r4, #12]
 80064d6:	9903      	ldr	r1, [sp, #12]
 80064d8:	1a5b      	subs	r3, r3, r1
 80064da:	42ab      	cmp	r3, r5
 80064dc:	dcf2      	bgt.n	80064c4 <_printf_i+0x210>
 80064de:	e7eb      	b.n	80064b8 <_printf_i+0x204>
 80064e0:	2500      	movs	r5, #0
 80064e2:	f104 0619 	add.w	r6, r4, #25
 80064e6:	e7f5      	b.n	80064d4 <_printf_i+0x220>
 80064e8:	0800666d 	.word	0x0800666d
 80064ec:	0800667e 	.word	0x0800667e

080064f0 <memmove>:
 80064f0:	4288      	cmp	r0, r1
 80064f2:	b510      	push	{r4, lr}
 80064f4:	eb01 0402 	add.w	r4, r1, r2
 80064f8:	d902      	bls.n	8006500 <memmove+0x10>
 80064fa:	4284      	cmp	r4, r0
 80064fc:	4623      	mov	r3, r4
 80064fe:	d807      	bhi.n	8006510 <memmove+0x20>
 8006500:	1e43      	subs	r3, r0, #1
 8006502:	42a1      	cmp	r1, r4
 8006504:	d008      	beq.n	8006518 <memmove+0x28>
 8006506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800650a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800650e:	e7f8      	b.n	8006502 <memmove+0x12>
 8006510:	4402      	add	r2, r0
 8006512:	4601      	mov	r1, r0
 8006514:	428a      	cmp	r2, r1
 8006516:	d100      	bne.n	800651a <memmove+0x2a>
 8006518:	bd10      	pop	{r4, pc}
 800651a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800651e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006522:	e7f7      	b.n	8006514 <memmove+0x24>

08006524 <_sbrk_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	4d06      	ldr	r5, [pc, #24]	@ (8006540 <_sbrk_r+0x1c>)
 8006528:	2300      	movs	r3, #0
 800652a:	4604      	mov	r4, r0
 800652c:	4608      	mov	r0, r1
 800652e:	602b      	str	r3, [r5, #0]
 8006530:	f7fa fb82 	bl	8000c38 <_sbrk>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d102      	bne.n	800653e <_sbrk_r+0x1a>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	b103      	cbz	r3, 800653e <_sbrk_r+0x1a>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	20004834 	.word	0x20004834

08006544 <_realloc_r>:
 8006544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006548:	4607      	mov	r7, r0
 800654a:	4614      	mov	r4, r2
 800654c:	460d      	mov	r5, r1
 800654e:	b921      	cbnz	r1, 800655a <_realloc_r+0x16>
 8006550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006554:	4611      	mov	r1, r2
 8006556:	f7ff bc5b 	b.w	8005e10 <_malloc_r>
 800655a:	b92a      	cbnz	r2, 8006568 <_realloc_r+0x24>
 800655c:	f7ff fbec 	bl	8005d38 <_free_r>
 8006560:	4625      	mov	r5, r4
 8006562:	4628      	mov	r0, r5
 8006564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006568:	f000 f81a 	bl	80065a0 <_malloc_usable_size_r>
 800656c:	4284      	cmp	r4, r0
 800656e:	4606      	mov	r6, r0
 8006570:	d802      	bhi.n	8006578 <_realloc_r+0x34>
 8006572:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006576:	d8f4      	bhi.n	8006562 <_realloc_r+0x1e>
 8006578:	4621      	mov	r1, r4
 800657a:	4638      	mov	r0, r7
 800657c:	f7ff fc48 	bl	8005e10 <_malloc_r>
 8006580:	4680      	mov	r8, r0
 8006582:	b908      	cbnz	r0, 8006588 <_realloc_r+0x44>
 8006584:	4645      	mov	r5, r8
 8006586:	e7ec      	b.n	8006562 <_realloc_r+0x1e>
 8006588:	42b4      	cmp	r4, r6
 800658a:	4622      	mov	r2, r4
 800658c:	4629      	mov	r1, r5
 800658e:	bf28      	it	cs
 8006590:	4632      	movcs	r2, r6
 8006592:	f7ff fbc3 	bl	8005d1c <memcpy>
 8006596:	4629      	mov	r1, r5
 8006598:	4638      	mov	r0, r7
 800659a:	f7ff fbcd 	bl	8005d38 <_free_r>
 800659e:	e7f1      	b.n	8006584 <_realloc_r+0x40>

080065a0 <_malloc_usable_size_r>:
 80065a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065a4:	1f18      	subs	r0, r3, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	bfbc      	itt	lt
 80065aa:	580b      	ldrlt	r3, [r1, r0]
 80065ac:	18c0      	addlt	r0, r0, r3
 80065ae:	4770      	bx	lr

080065b0 <_init>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	bf00      	nop
 80065b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b6:	bc08      	pop	{r3}
 80065b8:	469e      	mov	lr, r3
 80065ba:	4770      	bx	lr

080065bc <_fini>:
 80065bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065be:	bf00      	nop
 80065c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c2:	bc08      	pop	{r3}
 80065c4:	469e      	mov	lr, r3
 80065c6:	4770      	bx	lr
